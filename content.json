{"meta":{"title":"WANQIANG.WANG","subtitle":null,"description":null,"author":"Wanqiang","url":"https://wanqiang.wang","root":"/"},"pages":[{"title":"","date":"2025-10-21T02:38:15.423Z","updated":"2025-10-21T02:38:15.423Z","comments":true,"path":"404.html","permalink":"https://wanqiang.wang/404.html","excerpt":"","text":""},{"title":"","date":"2015-05-24T06:56:21.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"about/index.html","permalink":"https://wanqiang.wang/about/index.html","excerpt":"","text":"关于我关于什么呢，我也不知道啊，游走在这个城里，寻找自己的出路。 Links CSDN Blog Qt 下载 数据分析 BDP 图说 好文 正则表达式学习 paulgraham artic 多线程单键总结 多线程单键总结2 深度学习教程 notepad ++ 插件 pdf转图片 iText页眉页脚实现 学习资料好书收集 books from github 概念 卷积 工具 plantUML教程 各种语言的手册 Java Decompiler 工具 (JD GUI) FTP工具 深度学习 正则表达式工具"},{"title":"categories","date":"2017-06-22T04:39:04.000Z","updated":"2025-10-21T02:38:15.428Z","comments":false,"path":"categories/index.html","permalink":"https://wanqiang.wang/categories/index.html","excerpt":"","text":""},{"title":"CSDN上的博客","date":"2015-05-17T05:11:19.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"csdn/index.html","permalink":"https://wanqiang.wang/csdn/index.html","excerpt":"","text":"http://blog.csdn.net/wwq100?viewmode=contents 没有搞清楚，怎么把它搞过来。"},{"title":"tags","date":"2025-10-21T02:38:15.428Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"tags/index.html","permalink":"https://wanqiang.wang/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"深圳自驾去长沙","slug":"深圳自驾去长沙","date":"2025-10-21T02:12:00.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/61a2.html","permalink":"https://wanqiang.wang/post/61a2.html","excerpt":"","text":"长沙旅游感想 为时6天的长沙之行结束🔚了 此为行程记录和游览感想 可供参考💖 Day 1 高椅岭感受：山清水秀。天空倒映在水面，形成水天一色的景色。适合赏景，感受自然。 好处：空气清新 景色秀丽 坏处：山高路远 途中补给点少 食物最好自备 Day2 东江湖感受：湖水是正宗的湖蓝色，层峦叠嶂 。渔夫撒网景色虽然具有山水气息，但并不是真的（而是表演）。坐船可以参观溶洞，和银子岩溶洞一样。溶洞里很湿冷，地很滑，没什么特别的，不建议❌。船上风景没什么特别的😓。 好处：风景秀丽 空气清新 体验烟雨江南生活（？。 坏处：景区商业化 机械化的诗意 Day 3 石鼓书院➕东洲岛感受：石鼓书院很有书香气息，有一些历史介绍。有一个背诗领奖品的活动，适合小朋友👧。东洲岛可以看到很多在湘江游泳的人。就是一个普通的公园，不建议❌。 好处：体验衡阳市民的日常生活，感受悠闲的氛围。学习历史。人少。 坏处：很累 景色单一 无聊。 Day4 南岳衡山感受：坐了一个小车上了大部分的山。坐在靠窗的位置可以感受到习习的凉风。上山的过程很累，有抬轿子的（坐了会被围观😼）。山上有各种石碑可以拍照（平安石…等等）。山顶有寺庙可以参拜。（注意：千万不要买香！！山上有免费🆓的三支）。 好处：锻炼身体 打卡五岳之一 坏处：累 人多。 Day 5 湖南大学➕岳麓山➕五一广场➕恰同学少年广场感受：湖南大学环境挺好的 不是靠近景区的地方挺幽雅僻静的。岳麓山大部分人都在爱晚亭和爱心树打卡😂。有精力的可以上山（挺陡峭的），山上有卖吃的。五一广场除了吃就是吃，建议空腹去。恰同学少年广场是不错的毛主席雕像取景地，人挺多的。 好处：网红打卡 锻炼身体 休闲放松。 坏处：人多 跟风的多 累。 Day6 橘子洲头走的腿超级累。。不想走路的一定要坐车🚗这个景点主要就是拍那个雕像，可以去恰同学少年广场拍平替。 好处：拍照📷打卡 坏处：网红打卡点人多 无聊 Day7 李自健博物馆里面有很多精美的油画🖼️，有乡土童年","categories":[{"name":"旅行","slug":"旅行","permalink":"https://wanqiang.wang/categories/%E6%97%85%E8%A1%8C/"},{"name":"国内游","slug":"旅行/国内游","permalink":"https://wanqiang.wang/categories/%E6%97%85%E8%A1%8C/%E5%9B%BD%E5%86%85%E6%B8%B8/"},{"name":"自驾游","slug":"旅行/国内游/自驾游","permalink":"https://wanqiang.wang/categories/%E6%97%85%E8%A1%8C/%E5%9B%BD%E5%86%85%E6%B8%B8/%E8%87%AA%E9%A9%BE%E6%B8%B8/"}],"tags":[{"name":"自驾游","slug":"自驾游","permalink":"https://wanqiang.wang/tags/%E8%87%AA%E9%A9%BE%E6%B8%B8/"}]},{"title":"高德纳传记","slug":"TEX作者高德纳传记","date":"2025-10-12T09:39:00.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"/donald-knuth-biography/","permalink":"https://wanqiang.wang/donald-knuth-biography/","excerpt":"","text":"Donald Knuth（高德纳）：TEX排版系统之父在计算机科学的发展史上，Donald Ervin Knuth（唐纳德·欧文·克努特，中文名高德纳）是一位划时代的人物。他不仅是算法和程序设计技术的先驱，更因发明了TEX排版系统而深刻改变了学术出版的面貌。 早慧的少年时代1938年1月10日，高德纳出生于美国威斯康辛州密尔沃基的一个教师家庭。受父亲影响，他自幼对学习和音乐产生了浓厚兴趣，并展现出非凡的天赋。8年级时，高德纳参加了当地糖果厂举办的单词排列比赛，他利用字典在家研究两周，创造出4500个单词的惊人成绩（远超裁判掌握的2000个），为班级赢得了冠军。 1956年，高德纳以各科平均97.5的创纪录高分从高中毕业，进入开思理工学院（现凯斯西储大学）攻读物理。然而，一次偶然的机会让他接触到了计算机，从此他的人生轨迹发生了改变。 计算机科学领域的巨擘高德纳的学术生涯堪称传奇。他是算法和程序设计技术的先驱者，其代表作《计算机程序设计的艺术》（The Art of Computer Programming）被公认为计算机科学领域的经典巨著。这套多卷本著作系统阐述了计算机程序设计的基础理论和技术，对整个计算机科学的发展产生了深远影响。 1974年，年仅36岁的高德纳因其在计算机科学领域的杰出贡献，荣获计算机界的最高荣誉——图灵奖。这一奖项的获得，标志着他已经成为计算机科学领域的顶尖学者。 TEX排版系统的诞生高德纳对排版技术的不满源于一次不愉快的经历：他发现自己著作的第二版排版质量远不如第一版。这一契机促使他投身于排版系统的研发。经过十年的不懈努力，他于1978年推出了革命性的计算机排版系统TEX。 TEX是专为数学公式和科技文献设计的排版系统，以其极高的排版质量、稳定性和可移植性著称。高德纳为了确保TEX的稳定性，甚至宣布：当TEX的版本号达到3.14159265时，将不再对其核心功能进行修改，只修正严重错误——这一版本号的选择也体现了他对数学美的追求。 除了TEX，高德纳还发明了METAFONT字型设计系统，为计算机排版提供了完整的解决方案。这两个工具的结合，彻底改变了科技文献的排版方式，至今仍是数学、物理、计算机科学等领域学术出版的标准工具。 其他重要贡献高德纳的贡献不仅限于TEX和《计算机程序设计的艺术》。他提出的Knuth-Morris-Pratt字符串搜索算法、LR解析器等理论成果，对计算机科学的多个分支产生了深远影响。 值得一提的是，高德纳还是一位注重学术传承的教育家。他的著作和教学影响了几代计算机科学家，包括许多后来的图灵奖得主。在《计算机程序设计的艺术》中，他还引述了中国古代数学家明安图的研究成果，体现了他对全球数学文化的尊重和包容。 结语Donald Knuth以其非凡的才华、严谨的治学态度和对完美的不懈追求，成为计算机科学领域的标杆性人物。他的贡献不仅在于创造了TEX这样改变行业的工具，更在于通过自己的著作和研究，为计算机科学奠定了坚实的理论基础。 正如《美国科学家》杂志所评价的，他的著作是20世纪最重要的物理科学类专著之一。高德纳的一生，完美诠释了一位学者对知识的热爱和对卓越的追求，他的影响将继续激励着一代又一代的计算机科学家和排版工作者。","categories":[{"name":"人物","slug":"人物","permalink":"https://wanqiang.wang/categories/%E4%BA%BA%E7%89%A9/"}],"tags":[{"name":"人物传记","slug":"人物传记","permalink":"https://wanqiang.wang/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"},{"name":"计算机科学","slug":"计算机科学","permalink":"https://wanqiang.wang/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"},{"name":"TEX","slug":"TEX","permalink":"https://wanqiang.wang/tags/TEX/"}]},{"title":"广州自驾旅游攻略","slug":"广州旅游攻略","date":"2025-10-03T15:53:00.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/61b3.html","permalink":"https://wanqiang.wang/post/61b3.html","excerpt":"","text":"广州自驾旅游攻略本攻略专为自驾游客设计，详细介绍广州及周边地区的自驾路线规划、交通状况、停车信息及实用贴士，帮助您享受便捷、舒适的广州自驾之旅。 最佳自驾时间广州属于亚热带季风气候，全年温暖湿润。最佳自驾时间为10月至次年4月，这段时间气温适宜，降水较少，道路状况良好，非常适合自驾出行。 春季（3-5月）：气温逐渐回暖，鲜花盛开，是欣赏广州城市美景的好时节。 夏季（6-9月）：炎热潮湿，多雷阵雨，容易出现暴雨积水，不太适合长时间自驾。 秋季（10-11月）：秋高气爽，温度适宜，是自驾的黄金季节。 冬季（12-2月）：温暖少雨，偶尔会有短暂的低温天气，但总体适合自驾。 自驾路线规划市区精华自驾路线（1-2天）经典市区环线： 起点：任选市区酒店 路线：广州塔 → 珠江新城 → 海心沙 → 广州大道 → 越秀公园 → 陈家祠 → 沙面岛 → 上下九步行街 → 广州塔（环线） 全程：约30公里 建议游玩：1-2天，可根据兴趣选择景点停留 特色体验：这条路线串联了广州的现代地标和历史文化景点，既能欣赏广州的城市天际线，又能感受岭南传统文化的魅力。 广州周边自驾路线（2-3天）广州-从化生态之旅： 路线：广州市区 → 帽峰山森林公园 → 从化温泉度假区 → 流溪河国家森林公园 → 石门国家森林公园 → 返回广州市区 全程：约200公里 建议游玩：2-3天 特色体验：这条路线以自然风光和生态旅游为主题，适合喜欢亲近自然、享受温泉的游客。 广州-顺德美食之旅： 路线：广州市区 → 番禺长隆旅游度假区 → 顺德清晖园 → 逢简水乡 → 顺德美食街 → 返回广州市区 全程：约120公里 建议游玩：2天 特色体验：这条路线将广州和顺德的美食、景点结合，既能游玩，又能品尝地道的广东美食。 抵达广州自驾路线从周边城市自驾到广州 深圳-广州： 路线：深圳市区 → 广深高速（G4）→ 广州市区 全程：约120公里 车程：约2小时 注意事项：广深高速车流量大，建议避开早晚高峰。 广州市区交通状况与注意事项交通拥堵情况广州作为一线城市，交通拥堵较为严重，特别是以下时段和区域： 高峰期：周一至周五 7:30-9:30 和 17:00-19:30 拥堵区域：天河CBD、环市东路、广州大道、珠江新城、上下九步行街周边 避堵建议： 尽量避开高峰期出行 使用导航软件实时查看路况，选择最优路线 前往热门景点可考虑将车停在附近停车场，步行或乘坐公共交通前往 限行政策广州市实行”开四停四”限行政策： 限行区域：广州市区（不含高速公路、华南快速干线、东南西环城市快速路） 限行时间：工作日 7:00-9:00 和 17:00-20:00 限行规则：非广州市籍中小客车进入限行区域连续行驶时间最长不得超过4天（自然日），再次进入须间隔4天（自然日）以上 注意事项： 限行措施不包括法定节假日和休息日 违反限行规定将被处以200元罚款并记3分 建议使用导航软件或广州交警官方APP查询实时限行信息 高速公路与快速路广州拥有发达的高速公路和快速路网络，主要包括： 环城高速（S81）：环绕广州市区的高速公路，连接多条进出广州的高速公路 华南快速干线（S4）：南北走向的快速路，连接广州城区与番禺、从化等地 南沙港快速（S105）：连接广州市区与南沙区的快速路 机场高速（S41）：连接广州市区与白云国际机场的高速公路 驾驶建议： 注意限速标志，保持安全车距 提前规划出口，避免错过出口 遇到拥堵时保持耐心，不要占用应急车道 停车指南市区主要景点停车场 景点名称 停车场位置 收费标准 车位情况 注意事项 广州塔 广州塔地下停车场 10元&#x2F;小时 约500个 节假日车位紧张，建议提前到达 陈家祠 陈家祠西侧停车场 8元&#x2F;小时 约100个 车位较少，高峰期可能无位 越秀公园 越秀公园南门、北门停车场 6元&#x2F;小时 约300个 南门停车场靠近主要景点 沙面岛 沙面岛内多个小型停车场 10元&#x2F;小时 约200个 岛上道路狭窄，建议在岛外停车 天河城 天河城地下停车场 15元&#x2F;小时 约1000个 消费可凭小票减免停车费 珠江新城 花城广场地下停车场 12元&#x2F;小时 约2000个 停车场较大，分多个区域，注意记好停车位置 长隆旅游度假区 各园区专用停车场 20元&#x2F;次（全天） 约5000个 节假日人流量大，建议早到 北京路文化旅游区 广百百货地下停车场 15元&#x2F;小时 约300个 商业区车位紧张，建议公共交通前往 上下九步行街 荔湾广场地下停车场 10元&#x2F;小时 约400个 周边道路拥堵，建议错峰前往 商场与酒店停车场广州的大型商场和酒店普遍提供收费停车场，收费标准一般为10-20元&#x2F;小时。以下是一些主要商场的停车信息： 商场名称 停车场位置 收费标准 优惠政策 天河城 天河路208号 15元&#x2F;小时 消费满300元免费停车2小时 太古汇 天河路385号 15元&#x2F;小时 消费满500元免费停车2小时 正佳广场 天河路228号 12元&#x2F;小时 消费满200元免费停车1小时 万菱汇 天河路385号 12元&#x2F;小时 消费满100元免费停车1小时 凯德广场·云尚 云城西路890号 10元&#x2F;小时 消费满100元免费停车2小时 免费及低价停车场推荐 地点 停车场位置 收费标准 车位情况 注意事项 广州市图书馆 珠江新城冼村路 免费 约300个 需凭读者证进入，限停3小时 广东省博物馆 珠江新城冼村路 免费 约200个 需提前预约，限停3小时 海珠湿地公园 新滘中路168号 10元&#x2F;次 约500个 节假日车位紧张 广州国际生物岛 星岛环南路 5元&#x2F;小时 约300个 环境优美，适合周末休闲 黄埔古港 石基路 10元&#x2F;次 约200个 周边有众多美食，周末人流量大 立体停车场信息广州部分区域建设了立体停车场，这些停车场通常位于寸土寸金的市中心，虽然停车流程相对复杂，但能有效缓解停车难问题： 天河体育中心立体停车场：天河路299号，收费12元&#x2F;小时，约有500个车位 广州东站立体停车场：天河区东站路1号，收费10元&#x2F;小时，约有800个车位 海珠广场立体停车场：越秀区起义路1号，收费15元&#x2F;小时，约有300个车位 停车APP与小程序推荐以下APP和小程序可以帮助您更便捷地查找和预订停车位： 广州停车：广州市官方停车APP，提供实时车位查询、导航、线上支付等功能 ETCP停车：覆盖广州大部分商场、小区停车场，支持无感支付 小强停车：专注于机场、高铁站周边停车场预订，价格实惠 高德地图&#x2F;百度地图：除导航功能外，也提供附近停车场查询和实时车位信息 自驾实用工具与服务紧急救援与服务 道路救援： 广东省交通集团服务热线：020-96998 高速公路救援：12122 医疗急救：120 报警电话：110 车险理赔：根据自己投保的保险公司拨打相应的理赔电话 加油站信息广州各主要道路、高速公路沿线均有加油站，主要包括中石化、中石油、壳牌等品牌。建议在出发前确保油箱有足够燃油，特别是前往郊区或周边地区时。","categories":[{"name":"旅行","slug":"旅行","permalink":"https://wanqiang.wang/categories/%E6%97%85%E8%A1%8C/"},{"name":"国内游","slug":"旅行/国内游","permalink":"https://wanqiang.wang/categories/%E6%97%85%E8%A1%8C/%E5%9B%BD%E5%86%85%E6%B8%B8/"},{"name":"自驾游","slug":"旅行/国内游/自驾游","permalink":"https://wanqiang.wang/categories/%E6%97%85%E8%A1%8C/%E5%9B%BD%E5%86%85%E6%B8%B8/%E8%87%AA%E9%A9%BE%E6%B8%B8/"}],"tags":[{"name":"广州","slug":"广州","permalink":"https://wanqiang.wang/tags/%E5%B9%BF%E5%B7%9E/"},{"name":"自驾游","slug":"自驾游","permalink":"https://wanqiang.wang/tags/%E8%87%AA%E9%A9%BE%E6%B8%B8/"},{"name":"交通攻略","slug":"交通攻略","permalink":"https://wanqiang.wang/tags/%E4%BA%A4%E9%80%9A%E6%94%BB%E7%95%A5/"}]},{"title":"理查德・希普（Richard Hipp）：SQLite 之父与轻量化技术革命的引领者","slug":"Richard Hipp","date":"2025-10-02T15:11:00.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/9c76.html","permalink":"https://wanqiang.wang/post/9c76.html","excerpt":"","text":"理查德・希普（Richard Hipp）：SQLite 之父与轻量化技术革命的引领者一、人物概览理查德・德怀恩・希普（D. Richard Hipp），1961 年 4 月 9 日出生于美国北卡罗来纳州夏洛特市，在佐治亚州亚特兰大郊区长大，是全球装机量最高的数据库引擎 SQLite 的创造者与核心维护者，同时也是分布式版本控制系统 Fossil、轻量级 Web 服务器 Althttpd 等多款影响深远的开源工具的开发者。他以 “问题驱动” 的开发理念和 “极简高效” 的技术哲学闻名，其主导的项目已渗透到嵌入式设备、移动终端、航空航天等众多关键领域，成为数字基础设施的重要基石。 二、成长轨迹与学术积淀（一）早年启蒙：在匮乏中孕育创造欲理查德对计算机的兴趣始于 20 世纪 70 年代中期，1970 年代读 9 年级时，一次偶然接触电传打字机连接的大型计算机的经历，让他下定决心学习编程。当时他借遍学校图书馆仅有的 3 本计算机书籍，连夜读完并开始钻研 BASIC 语言。这种早期的探索热情，为他日后的技术道路埋下了种子。 硬件条件的匮乏进一步激发了他的动手能力。Apple II 推出后，因经济有限，他仅购买主板，自行焊接键盘、电源等组件组装计算机；又因缺乏显示器，便通过调制射频信号将输出画面投射到电视机上，在 40 字符宽、24 行高的简陋界面中完成编程实践。这种 “从零构建” 的经历，深刻塑造了他后来追求极简、自包含系统架构的设计理念。 1979 年，理查德从斯通山高中毕业，随后进入佐治亚理工学院深造，于 1984 年获得电子工程硕士学位。毕业后，他加入美国电话电报公司（AT&amp;T）旗下的贝尔实验室工作三年，积累了扎实的工程实践经验。 （二）学术深耕：从工程到计算语言学1989 年，理查德重返校园，进入杜克大学计算机科学系，师从艾伦・W・比尔曼教授，专注于计算语言学研究。1992 年，他获得博士学位，但彼时学术市场上博士人才饱和，他认为诸多候选人比自己更具竞争力，于是放弃学术道路，转而创办了自己的软件开发咨询公司。这段跨学科的学术经历，为他后来处理复杂系统中的逻辑与语言解析问题（如 SQL 语句编译）奠定了理论基础。 三、核心成就：SQLite 的诞生与全球普及（一）缘起：军舰上的 “背锅” 与技术反思2000 年，理查德作为合同工为国防承包商通用动力子公司巴斯钢铁厂工作，负责美国海军驱逐舰 “奥斯卡・奥斯汀号” 的阀门控制系统开发。当时项目使用的 Informix 数据库频繁出现严重问题：作为独立进程运行的数据库体积庞大，无法适配舰船小型计算机，且经常因服务器故障导致系统瘫痪，弹出 “无法连接数据库服务器” 的错误提示 —— 而这种故障在战斗损管等紧急场景下可能造成致命后果。 作为负责维护的程序员，理查德被迫承担责任，却也因此萌生了颠覆性的思考：”为什么需要专门的服务器？为什么不直接从磁盘中读取数据？为什么不能尽量减轻数据库服务的依赖项？” 他发现，当时几乎所有数据库产品都附带庞大产品线，由一个个近似解堆砌而成，最终变得低效臃肿。恰逢此时美国联邦政府关门，他暂时失业，便利用待业时间着手开发一款轻量级数据库，解决实际项目中的痛点。 （二）初创：极简架构的突破性设计2000 年，理查德用 C 语言完成了 SQLite 1.0 版本的开发。这款数据库引擎仅有几百 KB 大小，没有安装包，无需运维教程，最核心的创新在于摒弃了传统的客户 &#x2F; 服务器架构，直接通过磁盘文件存储数据，实现了无需独立服务器进程、零配置即可运行的特性。 最初版本采用了极具前瞻性的设计：将每个 SQL 语句视为独立程序，通过自建编译器转化为可执行的汇编代码，这种架构为后续的高性能表现奠定了基础。当时互联网尚处于拨号时代，美国宽带普及率仅 1%，理查德缺乏谷歌等工具辅助，完全依靠自身能力完成了从理念到实现的突破。 （三）商业化与开源：从第一桶金到生态联盟2001 年，摩托罗拉看中 SQLite 的嵌入式优势，希望将其应用于新型手机操作系统，理查德给出 8 万美元授权报价，这成为 SQLite 的第一笔商业收入。对当时在开源道路上摸索的团队而言，这笔 “第一桶金” 的价值远超金钱本身，坚定了他们持续开发的信心。 此后，理查德相继与美国在线（AOL）达成合作，完成 CD 中的数据库需求。在诺基亚 Symbian OS 的数据库选型中，SQLite 击败 10 个竞争对手成为默认引擎，随后又获得 Mozilla 和 Adobe 的支持，共同组成 SQLite 联盟，为其发展壮大奠定了基础。值得一提的是，Mozilla 基金会 CEO 米切尔・贝克（Mitchell Baker）作为具有法务背景的 IT 商人，为 SQLite 提供了关键指导，帮助其建立稳定资金来源，同时保留了开发者主导的决策权利。 2005 年是 SQLite 发展的关键转折点：理查德决定将其开源，并于同年获得 Google O’Reilly 开源奖。他极具前瞻性地布局移动生态，早在 2005 年就与尚未被谷歌收购的 Android 开发团队接触，最终使 SQLite 成为 Android 系统核心组件。此外，团队还为黑莓、iPhone、Windows Mobile 等平台完成适配，押注移动赛道而非单一产品的策略获得巨大成功。 （四）品质升华：航空级测试的极致追求在获得广泛应用后，理查德团队曾一度宣称 SQLite”不存在任何错误可能性”，但为航空企业罗克韦尔柯林斯服务的经历，让他们深刻认识到消费级电子与航空技术对软件质量的要求存在天壤之别。罗克韦尔柯林斯向其介绍了航空产品质量标准 DO-178B—— 这一标准虽仅有薄薄一册且售价数百美元，却具有极强的实践价值，遵守即可切实提升软件质量，其核心要求是 100% 的 MC&#x2F;DC（修正条件 &#x2F; 判定覆盖）测试覆盖率。 为达到这一标准，理查德带领团队花费一年时间执行 996 工作制，完成数十亿个测试用例，最终通过严苛的航空软件认证。这种对质量的极致追求，使 SQLite 成为少数能同时应用于消费电子和航空航天领域的数据库，进一步拓展了其应用边界。 （五）全球影响：无处不在的数字基石如今，SQLite 已成为世界核心基础设施，实现了 “无处不在” 的部署：从智能手机（微信、iMessages、WhatsApp 等社交软件的消息存储均依赖其实现）、网络浏览器，到汽车、电视机顶盒，甚至商用飞机航电系统，均能看到它的身影。它是全球装机量最高的数据库，仅在个人计算机中搜索 *.db 文件，就能发现其广泛存在。更令人意外的是，通用电气、日立等巨头早年就已在产品中采用 SQLite，理查德竟是在这些企业因出口管制需走法律流程时才知晓此事，可谓 “被白嫖多年” 却也印证了其技术的强大吸引力。 四、技术生态：自给自足的工具链构建理查德秉持 “自己动手解决问题” 的理念，围绕 SQLite 构建了一套完整的自研工具链，形成独特的技术生态闭环，每个工具均源于实际需求，体现了 “问题驱动” 的开发思路。 （一）分布式版本控制系统 Fossil出于对 Git 复杂性的不满，理查德开发了集代码管理、Wiki、错误跟踪、论坛功能于一体的分布式版本控制系统 Fossil。与 Git 相比，它具有三大核心优势：采用单一二进制文件，部署便捷，几分钟即可搭建包含社区功能的服务器；内置时间线视图，可在单屏展示所有变更摘要；原生支持 SQLite 存储，实现数据管理的一致性。 有趣的是，SQLite 项目使用 Fossil 进行版本控制，而 Fossil 又依赖 SQLite 存储数据，形成相互依存的生态关系。2024 年，理查德宣布 SQLite 计划在 3.48 版本周期中重构构建流程，从 GNU Autotools 转向其在 Fossil 项目中已成功应用 13 年的 Auto Setup 工具，足见他对自研工具的信任与依赖。 （二）轻量级 Web 服务器 Althttpd为满足 SQLite 官网的部署需求，理查德开发了仅单个 C 文件的 Web 服务器 Althttpd。该服务器以安全、低资源占用为特色，无需复杂配置，可直接嵌入应用程序，完美延续了轻量化设计哲学。自 2004 年起，它便支撑sqlite.org运行，每天处理 50 万个 HTTP 请求，传输 200GB 数据，展现出极强的稳定性与高效性。 （三）其他关键工具除上述核心工具外，理查德还开发了多个实用工具： CVSTrac：采用 SQLite 存储数据的 Bug 跟踪系统，后来成为 Trac 系统的灵感来源； Lemon：轻量级解析器生成器，为 SQL 语句的解析提供了关键支撑； 同时，他还是 TCL 核心团队成员，深度参与脚本语言生态建设。 五、开发哲学与方法论理查德的技术实践蕴含着深刻的工程哲学，这些理念贯穿于他的所有项目，成为其产品持续成功的核心密码。 （一）极简主义：”够用就好” 的设计原则他始终坚持 “够用就好” 的原则，拒绝为系统添加冗余功能。SQLite 的核心代码始终保持精简，通过模块化设计确保可移植性；Althttpd 仅实现 Web 服务器核心功能，却能满足高并发场景需求；Fossil 摒弃 Git 的复杂特性，聚焦开发者实际需要的核心功能。这种极简主义使其产品在资源受限的嵌入式环境中具备不可替代的优势。 （二）问题驱动：从实际需求出发的开发逻辑所有项目均源于真实问题的解决：SQLite 诞生于军舰数据库故障的痛点，Fossil 起因于对 Git 复杂性的不满，Althttpd 则是为满足官网部署需求。这种 “先有问题，后有解决方案” 的开发模式，使他的产品能够精准击中用户需求，避免陷入 “为技术而技术” 的误区。 （三）极致测试：超越行业标准的质量管控在罗克韦尔柯林斯项目的推动下，理查德将航空级质量标准融入开发流程，建立了严苛的测试体系。SQLite 的测试用例数量达到数十亿级，实现 100% 的 MC&#x2F;DC 覆盖，这种对质量的执着使其产品能够在航空航天等关键领域立足，也为消费级应用提供了可靠保障。 （四）开源与商业的平衡：灵活的授权策略理查德采用差异化的开源授权模式：SQLite 使用公有领域授权（Public Domain），允许用户无限制使用和修改，最大化技术传播范围；而 Fossil 等工具则采用 BSD 许可，为商业合作保留空间。这种策略既保证了核心技术的广泛普及，又通过商业咨询等方式获得持续运营的资金，实现了开源项目的可持续发展。 （五）技术自主：拒绝过度依赖外部工具理查德的团队在开发中坚持技术自主，尽量避免依赖外部工具。例如，他们不使用 Docker 进行构建测试，仅通过标准源码树开展工作；不依赖 GitHub 进行代码管理，仅将其作为只读镜像仓库；重构 SQLite 构建流程时，选择自研的 Auto Setup 而非主流工具。这种自主可控的模式，确保了项目不受外部生态变化的影响，保持长期稳定发展。 六、个人生活与人格特质（一）家庭至上：以爱为名的事业传承1994 年 4 月 16 日，理查德与金杰・G・威里克（Ginger G. Wyrick）结婚，随后将自己创办的公司更名为 “Hipp, Wyrick &amp; Company, Inc.”（Hwaci），并将全部股份转让给妻子。他曾幽默地表示，说服妻子嫁给他比编写 SQLite 更具挑战性，这种表述背后体现了他对家庭的重视。如今，他与妻子定居在北卡罗来纳州夏洛特市，共同经营公司。 （二）低调务实：隐形的技术巨人与贝佐斯、盖茨等知名科技巨头不同，理查德始终保持低调，专注于技术研发而非公众曝光。他很少出现在聚光灯下，却通过 SQLite 等技术深刻影响着数十亿人的日常生活。这种 “低调做事” 的风格，使其被称为 “数字世界的扫地僧”—— 轻巧、安静，却在幕后默默支撑着庞大的数字生态。 （三）持续坚守：开源项目的 “终身家长”理查德曾将开源项目比作 “唤醒父爱” 的事业，程序员对自己创建的开源项目往往 “从一而终”。自 2000 年开发 SQLite 以来，他始终担任核心维护者，2006 年后更是带领 Hwaci 公司全员专注于 SQLite 的增强与支持工作。这种长期坚守的精神，正是 SQLite 能够持续迭代、保持活力的关键。 七、行业影响与历史地位（一）重塑数据库行业格局理查德创造的 SQLite 颠覆了传统客户 &#x2F; 服务器数据库的范式，开创了嵌入式关系型数据库的新赛道。它以 “零配置、自包含、轻量级” 的特性，填补了资源受限环境下的数据存储需求空白，改变了数据库行业 “重服务器、重配置” 的传统认知，推动了数据库技术向轻量化、嵌入式方向发展。 （二）赋能移动与嵌入式生态SQLite 的普及为移动互联网的发展提供了关键支撑。Android、iOS 等移动操作系统将其作为核心组件，使微信、iMessages 等亿级用户规模的应用得以实现高效的本地数据存储。在嵌入式领域，它广泛应用于汽车电子、智能家居、工业控制等场景，成为物联网时代的基础数据引擎。 （三）树立开源项目典范理查德主导的 SQLite 项目为开源生态提供了成功范本：它证明了小型团队（核心开发仅 3 人）也能创造改变世界的技术；其 “问题驱动 + 极致质量 + 灵活授权” 的模式，为开源项目的可持续发展提供了可借鉴的路径；而 “自给自足” 的工具链构建方式，则为开源项目的自主可控提供了新思路。 （四）影响一代开发者的技术理念理查德的极简主义设计哲学、问题驱动的开发思路和对质量的极致追求，深刻影响了一代开发者。越来越多的开发者开始反思 “功能堆砌” 的弊端，转向 “够用就好” 的务实设计；在开源项目中，”重视测试、自主可控” 的理念也因 SQLite 的成功而得到更广泛的认同。 八、总结理查德・希普是一位兼具技术天赋与工程智慧的开发者，他从军舰上的数据库故障中获得灵感，用 C 语言写出了改变世界的 SQLite，又围绕其构建了自给自足的技术生态。他的成功不仅源于对技术的热爱与执着，更得益于 “极简务实、问题驱动、质量至上” 的开发哲学。 作为 “隐形的技术巨人”，他虽低调内敛，却通过 SQLite 等技术支撑起庞大的数字生态，成为移动互联网、嵌入式计算等领域的幕后英雄。他的故事证明了：真正强大的技术往往源于对实际问题的深刻洞察，而持续的坚守与极致的追求，终将成就改变世界的伟大创造。","categories":[{"name":"SQLite","slug":"SQLite","permalink":"https://wanqiang.wang/categories/SQLite/"}],"tags":[{"name":"SQLite","slug":"SQLite","permalink":"https://wanqiang.wang/tags/SQLite/"}]},{"title":"hp打印机离合器维修","slug":"hp打印机离合器维护","date":"2022-07-04T11:57:13.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/f6b.html","permalink":"https://wanqiang.wang/post/f6b.html","excerpt":"","text":"故障现象 总是卡纸 不断的进纸，然后随机停下来卡住一张纸。 原因分析 参考B站上一个人的教程拆机，离合器通过一个电磁铁闭合，通过一个弹簧弹开。卡纸的原因是，离合器闭合后，不能用弹簧的力量弹开。 弹不开的原因：闭合处有海绵，时间太久，海绵融化了，有很大的粘性，闭合后粘住不能弹开。 解决过程 清理融化的海绵。 重新安装回去.(以为不要海绵也可以，B站的说法是，海绵只是减小闭合的噪音) 发现问题未解决。现象更严重，不断的进纸，不停下来，打印机出空白纸，随机停下来，卡纸。 听声音，发现离合器还是未工作，没听到弹开的声音。 拆机观察，确实吸住的。（有点没想明白，两个光光的铁片也能粘住，弹不开，有点怀疑弹簧的力度不够） 按B站的教程，在两个铁片的吸合处，贴上电工胶带。 观察吸合状态，胶带有一点点厚度，吸合时，吸合处会有一点点距离，悬空的。（可以认为，要这种状态才能弹开，没想到两个铁片子配合还挺精密，错误的估算了海绵的作用，不仅仅是降噪，不仅仅是降噪，去掉也不能工作） 重新装回去。测试，终于正常。 总结 离合器弹不开会不停的进纸，导制卡纸。（离合器不弹开就会一直进纸，至到弹开才会停下来） 清理融化的海绵后，一定要贴上电工胶带，不然一样会卡纸。 修坏的另外一个问题处理： 打印机会一下子进多张纸。 原因是搓纸轮后面那个弹簧太松了。 打印机背后正中有个小门，把两边的螺丝拧紧一些就可以了。（自己瞎修时，分析以为拧松能解决卡纸问题。）","categories":[{"name":"外设","slug":"外设","permalink":"https://wanqiang.wang/categories/%E5%A4%96%E8%AE%BE/"}],"tags":[{"name":"printer","slug":"printer","permalink":"https://wanqiang.wang/tags/printer/"}]},{"title":"Qt设置系统时间","slug":"Qt设置系统时间","date":"2022-06-13T11:47:48.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/f0e6.html","permalink":"https://wanqiang.wang/post/f0e6.html","excerpt":"","text":"1234QString date = &quot;date -s \\&quot;2007-08-03 14:15:00\\&quot;&quot; QProcess::startDetached(date);QProcess::startDetached(&quot;hwclock -w&quot;); // 同步系统时间QProcess::startDetached(&quot;sync&quot;); // 保存配置","categories":[{"name":"Qt","slug":"Qt","permalink":"https://wanqiang.wang/categories/Qt/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"https://wanqiang.wang/tags/Qt/"}]},{"title":"linux时区配置","slug":"linux时区配置","date":"2022-04-10T04:10:16.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/f0e6.html","permalink":"https://wanqiang.wang/post/f0e6.html","excerpt":"","text":"显示当前系统时区1timedatectl 显示系统支持的时区列表1timedatectl list-timezones 设置时区1sudo timedatectl set-timezone Asia/Hong_Kong","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/tags/linux/"}]},{"title":"zerotier重新配置","slug":"zerotier重新配置","date":"2022-04-07T23:20:08.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/fba5.html","permalink":"https://wanqiang.wang/post/fba5.html","excerpt":"","text":"ubuntu 重新加入已有网络总共三步： 安装： curl -s https://install.zerotier.com | sudo bash 加入网络： sudo zerotier-cli join 你的network ID 最后一步一定不要忘，要去官网上授权：点击网络id，向下找到授权的部分，在前面打上勾。","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://wanqiang.wang/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"Go语言笔记","slug":"Go语言","date":"2022-03-23T12:15:25.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/aa66.html","permalink":"https://wanqiang.wang/post/aa66.html","excerpt":"","text":"Go语言笔记参考：https://www.runoob.com/go/go-tutorial.html Go语言的优势Go语言（也称为Golang）是由Google开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。它具有以下优势： 简单易学：Go语言语法简洁，易于上手，减少了程序员的认知负担 高性能：编译成机器码，执行效率高，接近C&#x2F;C++ 并发支持：内置goroutine（轻量级线程）和channel，简化并发编程 内存安全：拥有垃圾回收机制，避免内存泄漏 丰富的标准库：提供了大量实用的标准库，减少开发工作量 工具链完善：内置构建工具、格式化工具、测试工具等 跨平台：支持多种操作系统和硬件架构 强类型：静态类型系统，在编译时就能发现很多错误 C++转Go语言指南对于C++程序员来说，Go语言既有许多熟悉的概念，也有一些需要适应的新特性。本章节将帮助C++程序员快速理解和掌握Go语言。 1. 语言哲学与主要区别C++和Go虽然都是静态类型的编译型语言，但它们的设计哲学有很大不同： 特性 C++ Go 复杂度 复杂，提供多种编程范式 简洁，专注于实用主义 内存管理 手动内存管理（new&#x2F;delete） 自动垃圾回收 并发模型 基于线程和锁 基于goroutine和channel 编译速度 较慢 非常快 错误处理 基于异常 基于返回值 模板 复杂的模板系统 简单的泛型支持（Go 1.18+） 2. 基础语法对比程序结构C++: 123456#include &lt;iostream&gt;int main() &#123; std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl; return 0;&#125; Go: 1234567package mainimport &quot;fmt&quot;func main() &#123; fmt.Println(&quot;Hello, World!&quot;)&#125; 变量声明C++: 123int a = 10;const int b = 20;int c, d; Go: 1234567var a int = 10const b int = 20var c, d int// 类型推导var e = 30// 短变量声明（函数内）f := 40 函数定义C++: 12345678int add(int a, int b) &#123; return a + b;&#125;// 函数重载double add(double a, double b) &#123; return a + b;&#125; Go: 123456789101112func add(a, b int) int &#123; return a + b&#125;// Go不支持函数重载，但可以使用可变参数或接口func addVariadic(args ...int) int &#123; sum := 0 for _, v := range args &#123; sum += v &#125; return sum&#125; 3. 内存管理C++程序员需要特别注意Go的自动内存管理机制： 堆与栈分配C++: 12345// 栈上分配int a = 10;// 堆上分配（需要手动释放）int* p = new int(20);delete p; // 必须手动释放 Go: 123456// Go会自动决定变量分配在堆上还是栈上// 不需要手动管理内存var a int = 10p := new(int)*p = 20// 不需要手动释放，垃圾回收器会处理 切片与数组C++: 12345// 数组int arr[5] = &#123;1, 2, 3, 4, 5&#125;;// 动态数组（需要手动管理内存）std::vector&lt;int&gt; vec = &#123;1, 2, 3, 4, 5&#125;;vec.push_back(6); Go: 12345// 数组var arr [5]int = [5]int&#123;1, 2, 3, 4, 5&#125;// 切片（Go的动态数组，自动管理内存）slice := []int&#123;1, 2, 3, 4, 5&#125;slice = append(slice, 6) 4. 面向对象编程Go没有类和继承，但可以通过结构体和接口实现类似的功能： 结构体与方法C++: 12345678910111213141516171819class Rectangle &#123;private: double width; double height;public: Rectangle(double w, double h) : width(w), height(h) &#123;&#125; double area() const &#123; return width * height; &#125; void scale(double factor) &#123; width *= factor; height *= factor; &#125;&#125;;// 使用Rectangle rect(10, 5);std::cout &lt;&lt; rect.area() &lt;&lt; std::endl;rect.scale(2); Go: 1234567891011121314151617181920type Rectangle struct &#123; Width float64 Height float64&#125;// 值接收器方法func (r Rectangle) Area() float64 &#123; return r.Width * r.Height&#125;// 指针接收器方法（可修改结构体）func (r *Rectangle) Scale(factor float64) &#123; r.Width *= factor r.Height *= factor&#125;// 使用rect := Rectangle&#123;10, 5&#125;fmt.Println(rect.Area())rect.Scale(2) 接口实现C++: 123456789101112131415class Shape &#123;public: virtual ~Shape() = default; virtual double area() const = 0;&#125;;class Circle : public Shape &#123;private: double radius;public: Circle(double r) : radius(r) &#123;&#125; double area() const override &#123; return 3.14 * radius * radius; &#125;&#125;; Go: 123456789101112type Shape interface &#123; Area() float64&#125;type Circle struct &#123; Radius float64&#125;// 隐式实现Shape接口func (c Circle) Area() float64 &#123; return 3.14 * c.Radius * c.Radius&#125; 5. 并发编程这是Go语言最强大的特性之一，相比C++的线程模型有很大不同： C++: 123456789101112131415161718#include &lt;thread&gt;#include &lt;vector&gt;#include &lt;iostream&gt;void printHello(int id) &#123; std::cout &lt;&lt; &quot;Hello from thread &quot; &lt;&lt; id &lt;&lt; std::endl;&#125;int main() &#123; std::vector&lt;std::thread&gt; threads; for (int i = 0; i &lt; 5; i++) &#123; threads.push_back(std::thread(printHello, i)); &#125; for (auto&amp; t : threads) &#123; t.join(); &#125; return 0;&#125; Go: 1234567891011121314151617181920package mainimport ( &quot;fmt&quot; &quot;time&quot;)func printHello(id int) &#123; fmt.Printf(&quot;Hello from goroutine %d\\n&quot;, id)&#125;func main() &#123; // 启动5个goroutine for i := 0; i &lt; 5; i++ &#123; go printHello(i) // 只需添加go关键字 &#125; // 等待goroutine完成（实际项目中应使用sync.WaitGroup） time.Sleep(time.Second)&#125; 通道（Channel）Go的通道提供了一种在goroutine之间安全传递数据的方式： 12345678910111213141516func main() &#123; // 创建一个整型通道 ch := make(chan int) // 启动一个goroutine发送数据 go func() &#123; ch &lt;- 42 // 发送数据到通道 &#125;() // 在主goroutine中接收数据 value := &lt;-ch // 从通道接收数据 fmt.Println(&quot;Received:&quot;, value) // 关闭通道 close(ch)&#125; 6. 错误处理Go使用返回值而不是异常来处理错误： C++: 12345678try &#123; if (b == 0) &#123; throw std::runtime_error(&quot;Division by zero&quot;); &#125; int result = a / b;&#125; catch (const std::exception&amp; e) &#123; std::cerr &lt;&lt; &quot;Error: &quot; &lt;&lt; e.what() &lt;&lt; std::endl;&#125; Go: 123456789101112131415func divide(a, b int) (int, error) &#123; if b == 0 &#123; return 0, errors.New(&quot;division by zero&quot;) &#125; return a / b, nil&#125;func main() &#123; result, err := divide(10, 0) if err != nil &#123; fmt.Println(&quot;Error:&quot;, err) return &#125; fmt.Println(&quot;Result:&quot;, result)&#125; 7. 实用技巧 使用Go的格式化工具：gofmt或go fmt可以自动格式化代码，保持一致的代码风格 使用Go模块管理依赖：go mod init、go get、go mod tidy等命令 使用defer进行资源清理：替代C++中的RAII模式 使用go vet检查代码问题：静态代码分析工具 使用接口进行抽象：Go的接口是隐式的，更容易实现组合而非继承 避免过度使用指针：Go的垃圾回收器很高效，不必像C++那样频繁使用指针优化性能 学习Go的标准库：Go的标准库非常强大，涵盖了网络、文件操作、加密等多种功能 通过理解这些关键区别和转换技巧，C++程序员可以更快地适应Go语言的开发风格，并充分利用Go的简洁性和高效的并发模型。 安装和环境配置Go语言的安装非常简单，以下是针对不同操作系统的基本安装步骤： Windows安装 访问Go官方下载页面下载Windows安装包 运行安装包并按照提示完成安装 安装完成后，打开命令提示符，输入go version验证安装是否成功 Linux&#x2F;Mac安装123456789# Linux (Ubuntu/Debian)sudo apt-get updatesudo apt-get install golang-go# Mac (使用Homebrew)brew install go# 验证安装go version 环境变量配置安装完成后，建议配置以下环境变量： GOPATH: Go的工作目录，用于存放代码和依赖 GOROOT: Go的安装目录（通常由安装程序自动设置） PATH: 包含Go的bin目录，以便在任何位置执行Go命令 Go模块管理Go模块是Go 1.11版本引入的官方依赖管理工具，使用方法如下： 1234567891011121314# 在项目目录初始化Go模块go mod init myproject# 添加依赖go get github.com/pkg/errors# 安装所有依赖go mod tidy# 构建项目go build# 运行项目go run main.go Go模块的高级用法1234567891011121314151617181920212223# 查看当前模块的依赖图go mod graph# 查看指定包的详细信息go list -m -json github.com/pkg/errors# 升级依赖到最新版本go get -u github.com/pkg/errors# 升级依赖到指定版本go get github.com/pkg/errors@v0.9.1# 清理未使用的依赖go mod tidy# 验证依赖go mod verify# 创建vendor目录（包含所有依赖的副本）go mod vendor# 使用vendor目录构建go build -mod=vendor go.mod文件详解go.mod文件是Go模块的核心，包含了模块的基本信息和依赖声明： 123456789101112131415module github.com/user/myprojectgo 1.17require ( github.com/pkg/errors v0.9.1 github.com/sirupsen/logrus v1.8.1)require ( github.com/davecgh/go-spew v1.1.1 // indirect github.com/pmezard/go-difflib v1.0.0 // indirect github.com/stretchr/testify v1.7.0 // indirect golang.org/x/sys v0.0.0-20211030050608-9e8e0b390896 // indirect) Go语言的常见陷阱1. 切片的共享底层数组1234567891011package mainimport &quot;fmt&quot;func main() &#123; s := []int&#123;1, 2, 3, 4, 5&#125; t := s[1:3] // t和s共享底层数组 t[0] = 100 // 修改t也会影响s fmt.Println(s) // [1 100 3 4 5] fmt.Println(t) // [100 3]&#125; 2. map的并发访问1234567891011121314151617181920212223package mainimport ( &quot;fmt&quot; &quot;sync&quot;)func main() &#123; m := make(map[string]int) var wg sync.WaitGroup // 多个goroutine同时修改map会导致panic for i := 0; i &lt; 10; i++ &#123; wg.Add(1) go func(i int) &#123; defer wg.Done() m[fmt.Sprintf(&quot;key%d&quot;, i)] = i &#125;(i) &#125; wg.Wait() fmt.Println(m)&#125; 解决方法：使用sync.Map或加锁保护 1234567891011// 使用sync.Mapvar m sync.Map// 使用互斥锁var m = make(map[string]int)var mu sync.Mutex// 在访问map时加锁mu.Lock()m[&quot;key&quot;] = valuemu.Unlock() 3. for循环中的闭包引用变量1234567891011121314151617181920212223242526package mainimport ( &quot;fmt&quot; &quot;time&quot;)func main() &#123; for i := 0; i &lt; 5; i++ &#123; // 错误的写法：所有goroutine共享同一个i变量 go func() &#123; fmt.Println(i) // 可能输出5个5，因为循环结束时i=5 &#125;() &#125; time.Sleep(1 * time.Second) // 正确的写法：通过参数传递当前的i值 for i := 0; i &lt; 5; i++ &#123; go func(i int) &#123; fmt.Println(i) // 输出0,1,2,3,4（顺序可能不同） &#125;(i) &#125; time.Sleep(1 * time.Second)&#125; 4. nil接口不等于nil指针1234567891011package mainimport &quot;fmt&quot;func main() &#123; var p *int = nil var i interface&#123;&#125; = p fmt.Println(p == nil) // true fmt.Println(i == nil) // false，因为i包含了类型信息(*int)&#125; 5. 指针作为值接收器与指针接收器的区别1234567891011121314151617181920212223242526package mainimport &quot;fmt&quot;type Person struct &#123; Name string&#125;// 值接收器：会复制结构体func (p Person) SetName1(name string) &#123; p.Name = name // 只会修改副本，不会影响原结构体&#125;// 指针接收器：直接操作原结构体func (p *Person) SetName2(name string) &#123; p.Name = name // 会修改原结构体&#125;func main() &#123; p := Person&#123;Name: &quot;张三&quot;&#125; p.SetName1(&quot;李四&quot;) fmt.Println(p.Name) // 张三，没有变化 p.SetName2(&quot;王五&quot;) fmt.Println(p.Name) // 王五，发生了变化&#125; 空白标识符空白标识符（_）在Go语言中有多种用途： 1234567891011121314151617181920212223242526272829303132package mainimport ( &quot;fmt&quot; &quot;os&quot;)func main() &#123; // 1. 忽略导入包但不使用的警告 _ = fmt.Println // 2. 忽略函数的返回值 _ = os.Mkdir(&quot;test&quot;, 0755) // 3. 忽略多返回值中的某些值 file, _ := os.Open(&quot;test.txt&quot;) // 忽略错误 if file != nil &#123; defer file.Close() &#125; // 4. 在for range中忽略索引或值 numbers := []int&#123;1, 2, 3, 4, 5&#125; for _, v := range numbers &#123; fmt.Println(v) // 只关心值，不关心索引 &#125; // 5. 用于类型断言但只关心类型是否匹配 var i interface&#123;&#125; = 42 if _, ok := i.(int); ok &#123; fmt.Println(&quot;i是int类型&quot;) &#125;&#125; 数据类型数据类型值类型是 int、float、string、bool、struct和array，直接存储值，分配栈的内存空间，被函数调用完之后会释放。 引用类型是 slice、map、chan和值类型对应的指针，存储是一个地址（指针）,指针指向内存中真正存储数据的首地址，内存通常在堆分配，通过GC回收。 new 与 make 的区别 new 的参数要求传入一个类型，而不是一个值，它会申请该类型的内存大小空间，并初始化为对应的零值，返回该指向类型空间的一个指针。 make 也用于内存分配，但它只用于引用对象 slice、map、channel的内存创建，返回的类型是类型本身。 变量声明与初始化Go语言有多种变量声明和初始化的方式： 1234567891011121314151617181920212223242526272829303132package mainimport &quot;fmt&quot;func main() &#123; // 1. 标准声明（先声明后赋值） var a int a = 10 // 2. 声明并初始化 var b int = 20 // 3. 类型推导（编译器自动推断类型） var c = 30 // 4. 短变量声明（只能在函数内部使用） d := 40 // 5. 多变量声明 var e, f int = 50, 60 var g, h = 70, &quot;hello&quot; i, j := 80, &quot;world&quot; // 6. 批量声明 var ( k int = 90 l string = &quot;Go&quot; m bool = true ) fmt.Println(a, b, c, d, e, f, g, h, i, j, k, l, m)&#125; 流程控制条件语句123456789101112131415161718192021222324package mainimport &quot;fmt&quot;func main() &#123; // if语句 age := 18 if age &gt;= 18 &#123; fmt.Println(&quot;成年人&quot;) &#125; else if age &gt;= 6 &#123; fmt.Println(&quot;未成年人&quot;) &#125; else &#123; fmt.Println(&quot;儿童&quot;) &#125; // if语句可以包含一个初始化语句 if score := 95; score &gt;= 90 &#123; fmt.Println(&quot;优秀&quot;) &#125; else if score &gt;= 80 &#123; fmt.Println(&quot;良好&quot;) &#125; else &#123; fmt.Println(&quot;一般&quot;) &#125;&#125; 循环语句Go语言只有for一种循环结构，但可以实现多种循环方式： 12345678910111213141516171819202122232425262728293031package mainimport &quot;fmt&quot;func main() &#123; // 1. 标准for循环 for i := 0; i &lt; 5; i++ &#123; fmt.Println(i) &#125; // 2. for循环（类似while） j := 0 for j &lt; 5 &#123; fmt.Println(j) j++ &#125; // 3. 无限循环 /* for &#123; fmt.Println(&quot;无限循环&quot;) break // 取消注释可以退出循环 &#125; */ // 4. for range循环（遍历数组、切片、映射等） numbers := []int&#123;1, 2, 3, 4, 5&#125; for index, value := range numbers &#123; fmt.Printf(&quot;索引: %d, 值: %d\\n&quot;, index, value) &#125;&#125; 基础语法基础语语法 当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。 第一行代码 package main 定义包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。 Go 语言的字符串可以通过 + 实现 常量定义：const identifier [type] &#x3D; value 123456789101112131415package mainimport &quot;fmt&quot;func main() &#123; const LENGTH int = 10 const WIDTH int = 5 var area int const a, b, c = 1, false, &quot;str&quot; //多重赋值 area = LENGTH * WIDTH fmt.Printf(&quot;面积为 : %d&quot;, area) println() println(a, b, c) &#125; iota，特殊常量，可以认为是一个可以被编译器修改的常量。iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。 select 是 Go 中的一个控制结构，类似于用于通信的 switch 语句。每个 case 必须是一个通信操作，要么是发送要么是接收。 go 语言函数可以返回多个值。 Go 语言切片是对数组的抽象。Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(“动态数组”)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。 错误处理Go语言使用错误值而非异常来表示错误状态。错误类型是一个内置接口： 12345678910111213141516171819202122232425262728// error接口定义type error interface &#123; Error() string&#125;package mainimport ( &quot;errors&quot; &quot;fmt&quot;)// 自定义错误func divide(a, b int) (int, error) &#123; if b == 0 &#123; return 0, errors.New(&quot;除数不能为零&quot;) &#125; return a / b, nil&#125;func main() &#123; result, err := divide(10, 0) if err != nil &#123; fmt.Println(&quot;发生错误:&quot;, err) &#125; else &#123; fmt.Println(&quot;结果:&quot;, result) &#125;&#125; 指针指针是存储另一个变量内存地址的变量。Go语言的指针使用非常安全，不支持指针运算。 12345678910111213141516171819202122232425package mainimport &quot;fmt&quot;func main() &#123; // 声明变量 a := 10 // 声明指针变量 var p *int p = &amp;a // p指向a的内存地址 // 短变量声明方式创建指针 q := &amp;a fmt.Println(&quot;a的值:&quot;, a) fmt.Println(&quot;a的地址:&quot;, &amp;a) fmt.Println(&quot;p存储的地址:&quot;, p) fmt.Println(&quot;p指向的值:&quot;, *p) // 解引用操作 // 通过指针修改值 *p = 20 fmt.Println(&quot;修改后a的值:&quot;, a) fmt.Println(&quot;q指向的值:&quot;, *q)&#125; 结构体结构体是一种复合数据类型，它组合了零个或多个任意类型的命名变量。 123456789101112131415161718192021222324252627282930313233343536373839package mainimport &quot;fmt&quot;// 定义结构体 type Person struct &#123; Name string Age int City string&#125;func main() &#123; // 创建结构体实例 var p1 Person p1.Name = &quot;张三&quot; p1.Age = 30 p1.City = &quot;北京&quot; // 使用键值对创建 p2 := Person&#123; Name: &quot;李四&quot;, Age: 25, City: &quot;上海&quot;, &#125; // 使用位置初始化（注意顺序必须与结构体定义一致） p3 := Person&#123;&quot;王五&quot;, 35, &quot;广州&quot;&#125; // 创建结构体指针 p4 := &amp;Person&#123;&quot;赵六&quot;, 40, &quot;深圳&quot;&#125; fmt.Println(p1) fmt.Println(p2) fmt.Println(p3) fmt.Println(*p4) // 访问指针结构体的字段可以使用简化语法 fmt.Println(p4.Name)&#125; 结构体方法方法是与特定类型关联的函数，可以为结构体添加方法。 12345678910111213141516171819202122232425262728package mainimport &quot;fmt&quot;// 定义结构体 type Rectangle struct &#123; Width, Height float64&#125;// 定义结构体方法（接收器为值类型） func (r Rectangle) Area() float64 &#123; return r.Width * r.Height&#125;// 定义结构体方法（接收器为指针类型，可以修改结构体的值） func (r *Rectangle) Scale(factor float64) &#123; r.Width *= factor r.Height *= factor&#125;func main() &#123; rect := Rectangle&#123;10, 5&#125; fmt.Println(&quot;面积:&quot;, rect.Area()) // 调用值方法 rect.Scale(2) // 调用指针方法，修改rect的值 fmt.Println(&quot;缩放后的矩形:&quot;, rect) fmt.Println(&quot;缩放后的面积:&quot;, rect.Area())&#125; 接口Go语言的接口是隐式实现的，不需要显式声明实现了哪个接口。只要一个类型拥有接口要求的所有方法，它就自动实现了该接口。 123456789101112131415161718192021222324252627282930313233343536373839404142package mainimport &quot;fmt&quot;// 定义接口 type Shape interface &#123; Area() float64&#125;// 矩形结构体 type Rectangle struct &#123; Width float64 Height float64&#125;// 圆结构体 type Circle struct &#123; Radius float64&#125;// 矩形实现Area方法 func (r Rectangle) Area() float64 &#123; return r.Width * r.Height&#125;// 圆实现Area方法 func (c Circle) Area() float64 &#123; return 3.14 * c.Radius * c.Radius&#125;// 计算形状面积的函数，接受任何实现了Shape接口的类型 func PrintArea(s Shape) &#123; fmt.Printf(&quot;面积是: %f\\n&quot;, s.Area())&#125;func main() &#123; r := Rectangle&#123;Width: 10, Height: 5&#125; c := Circle&#123;Radius: 3&#125; PrintArea(r) // 输出: 面积是: 50.000000 PrintArea(c) // 输出: 面积是: 28.260000&#125; 切片操作切片是Go语言中非常重要的数据结构，以下是一些常用的切片操作： 123456789101112131415161718192021222324252627282930313233343536373839404142package mainimport &quot;fmt&quot;func main() &#123; // 创建切片 var s1 []int // 声明空切片 s2 := []int&#123;1, 2, 3, 4, 5&#125; // 直接初始化 s3 := make([]int, 5) // 使用make创建，长度为5 s4 := make([]int, 5, 10) // 使用make创建，长度为5，容量为10 // 切片操作（左闭右开） s5 := s2[1:3] // 包含索引1，不包含索引3，结果: [2 3] s6 := s2[2:] // 从索引2到末尾，结果: [3 4 5] s7 := s2[:3] // 从开头到索引3（不包含），结果: [1 2 3] // 追加元素 s8 := append(s2, 6, 7, 8) // 添加多个元素 // 追加切片 s9 := append(s8, s5...) // 注意...语法 // 复制切片 src := []int&#123;1, 2, 3&#125; dst := make([]int, 3) copy(dst, src) fmt.Println(&quot;s1:&quot;, s1) fmt.Println(&quot;s2:&quot;, s2) fmt.Println(&quot;s3:&quot;, s3) fmt.Println(&quot;s4:&quot;, s4) fmt.Println(&quot;s5:&quot;, s5) fmt.Println(&quot;s6:&quot;, s6) fmt.Println(&quot;s7:&quot;, s7) fmt.Println(&quot;s8:&quot;, s8) fmt.Println(&quot;s9:&quot;, s9) fmt.Println(&quot;src:&quot;, src) fmt.Println(&quot;dst:&quot;, dst) // 获取切片长度和容量 fmt.Println(&quot;s2长度:&quot;, len(s2), &quot;容量:&quot;, cap(s2))&#125; 映射(Map)映射是一种键值对数据结构，类似于其他语言中的字典或哈希表。 123456789101112131415161718192021222324252627282930313233343536373839404142package mainimport &quot;fmt&quot;func main() &#123; // 创建映射 var m1 map[string]int // 声明空映射（需要使用make初始化） m2 := make(map[string]int) // 使用make创建映射 m3 := map[string]int&#123; // 直接初始化映射 &quot;apple&quot;: 5, &quot;orange&quot;: 3, &quot;banana&quot;: 7, &#125; // 添加或更新元素 m2[&quot;golang&quot;] = 100 m2[&quot;python&quot;] = 80 m3[&quot;pear&quot;] = 2 m3[&quot;apple&quot;] = 10 // 更新已有元素 // 获取元素 fmt.Println(&quot;m2[&quot;golang&quot;]:&quot;, m2[&quot;golang&quot;]) // 检查键是否存在 value, exists := m2[&quot;java&quot;] if exists &#123; fmt.Println(&quot;java存在，值为:&quot;, value) &#125; else &#123; fmt.Println(&quot;java不存在&quot;) &#125; // 删除元素 delete(m3, &quot;orange&quot;) // 遍历映射（顺序是随机的） for key, value := range m3 &#123; fmt.Printf(&quot;%s: %d\\n&quot;, key, value) &#125; // 获取映射长度 fmt.Println(&quot;m3长度:&quot;, len(m3))&#125; defer语句defer语句用于延迟执行函数，通常用于资源清理、关闭文件等场景。 12345678910111213141516171819202122232425262728293031323334package mainimport &quot;fmt&quot;func main() &#123; // 基本使用 defer fmt.Println(&quot;这是最后执行的&quot;) fmt.Println(&quot;这是先执行的&quot;) // 多个defer语句的执行顺序是后进先出(LIFO) defer fmt.Println(&quot;defer 1&quot;) defer fmt.Println(&quot;defer 2&quot;) defer fmt.Println(&quot;defer 3&quot;) // defer用于资源清理 file := openFile(&quot;test.txt&quot;) defer closeFile(file) // 确保文件会被关闭 // 处理文件... // defer函数的参数在定义时就会求值 x := 1 defer fmt.Printf(&quot;x的值: %d\\n&quot;, x) // 这里会输出x的值: 1 x = 100 // 后面的修改不会影响defer语句中的x值&#125;func openFile(filename string) string &#123; fmt.Printf(&quot;打开文件: %s\\n&quot;, filename) return filename&#125;func closeFile(filename string) &#123; fmt.Printf(&quot;关闭文件: %s\\n&quot;, filename)&#125; panic和recoverGo语言使用panic和recover机制来处理程序运行时的严重错误。 12345678910111213141516171819202122232425package mainimport &quot;fmt&quot;func main() &#123; // 使用defer和recover捕获panic defer func() &#123; if r := recover(); r != nil &#123; fmt.Println(&quot;恢复程序&quot;, r) &#125; &#125;() // 故意触发panic divide(10, 0) // 下面的代码不会执行，除非panic被recover fmt.Println(&quot;程序继续执行&quot;)&#125;func divide(a, b int) &#123; if b == 0 &#123; panic(&quot;除数不能为零&quot;) // 触发panic &#125; fmt.Println(&quot;结果:&quot;, a/b)&#125; 并发Go语言通过goroutine实现并发，goroutine是轻量级线程，由Go运行时管理。 12345678910111213141516171819package mainimport ( &quot;fmt&quot; &quot;time&quot;)// 启动一个goroutinefunc say(s string) &#123; for i := 0; i &lt; 5; i++ &#123; time.Sleep(100 * time.Millisecond) fmt.Println(s) &#125;&#125;func main() &#123; go say(&quot;world&quot;) // 启动一个新的goroutine say(&quot;hello&quot;) // 当前goroutine执行&#125; 通道(channel)用于在goroutine之间传递数据，确保数据同步。 12345678910111213141516171819package mainimport &quot;fmt&quot;func main() &#123; // 创建一个整型通道 ch := make(chan int) // 启动一个goroutine go func() &#123; ch &lt;- 42 // 发送数据到通道 &#125;() value := &lt;-ch // 从通道接收数据 fmt.Println(&quot;收到的数值:&quot;, value) // 关闭通道 close(ch)&#125; 标准库的使用Go语言有丰富的标准库，以下是一些常用标准库的使用示例： 字符串处理 (strings包)12345678910111213141516171819202122232425262728293031323334353637383940package mainimport ( &quot;fmt&quot; &quot;strings&quot;)func main() &#123; s := &quot;Hello, Go!&quot; // 判断字符串是否包含子串 fmt.Println(strings.Contains(s, &quot;Go&quot;)) // true // 统计子串出现次数 fmt.Println(strings.Count(s, &quot;l&quot;)) // 2 // 判断字符串是否以某前缀开头 fmt.Println(strings.HasPrefix(s, &quot;Hello&quot;)) // true // 判断字符串是否以某后缀结尾 fmt.Println(strings.HasSuffix(s, &quot;!&quot;)) // true // 查找子串位置 fmt.Println(strings.Index(s, &quot;Go&quot;)) // 7 // 替换子串 fmt.Println(strings.Replace(s, &quot;Go&quot;, &quot;World&quot;, -1)) // Hello, World! // 分割字符串 parts := strings.Split(&quot;a,b,c,d&quot;, &quot;,&quot;) fmt.Println(parts) // [a b c d] // 连接字符串 joined := strings.Join(parts, &quot;-&quot;) fmt.Println(joined) // a-b-c-d // 转换大小写 fmt.Println(strings.ToUpper(s)) // HELLO, GO! fmt.Println(strings.ToLower(s)) // hello, go!&#125; 文件操作 (os和io&#x2F;ioutil包)12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport ( &quot;fmt&quot; &quot;io/ioutil&quot; &quot;os&quot;)func main() &#123; // 创建文件 file, err := os.Create(&quot;test.txt&quot;) if err != nil &#123; fmt.Println(&quot;创建文件失败:&quot;, err) return &#125; defer file.Close() // 写入内容 file.WriteString(&quot;Hello, Go!&quot;) file.Sync() // 读取文件全部内容 content, err := ioutil.ReadFile(&quot;test.txt&quot;) if err != nil &#123; fmt.Println(&quot;读取文件失败:&quot;, err) return &#125; fmt.Println(&quot;文件内容:&quot;, string(content)) // 检查文件是否存在 _, err = os.Stat(&quot;test.txt&quot;) if os.IsNotExist(err) &#123; fmt.Println(&quot;文件不存在&quot;) &#125; else &#123; fmt.Println(&quot;文件存在&quot;) &#125; // 删除文件 err = os.Remove(&quot;test.txt&quot;) if err != nil &#123; fmt.Println(&quot;删除文件失败:&quot;, err) &#125;&#125; Context包 (用于控制goroutine的生命周期)12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport ( &quot;context&quot; &quot;fmt&quot; &quot;time&quot;)func main() &#123; // 创建一个带有取消功能的context ctx, cancel := context.WithCancel(context.Background()) defer cancel() // 确保在main函数退出时取消context // 启动一个goroutine go worker(ctx, &quot;worker1&quot;) // 让程序运行一会儿 time.Sleep(3 * time.Second) // 取消context，通知worker停止工作 fmt.Println(&quot;取消任务&quot;) cancel() // 等待一会儿，让worker有时间响应取消信号 time.Sleep(1 * time.Second) fmt.Println(&quot;程序退出&quot;)&#125;// worker函数会监听context的取消信号func worker(ctx context.Context, name string) &#123; for &#123; select &#123; case &lt;-ctx.Done(): // 接收到取消信号 fmt.Printf(&quot;%s: 收到取消信号，停止工作\\n&quot;, name) return default: // 正常工作 fmt.Printf(&quot;%s: 正在工作...\\n&quot;, name) time.Sleep(1 * time.Second) &#125; &#125;&#125; 类型断言类型断言用于检查接口值的具体类型，或者将接口值转换为指定类型。 123456789101112131415161718192021222324252627282930313233package mainimport &quot;fmt&quot;func main() &#123; // 定义一个接口变量 var i interface&#123;&#125; i = 42 // 类型断言（带检查） value, ok := i.(int) if ok &#123; fmt.Printf(&quot;i的类型是int，值为: %d\\n&quot;, value) &#125; else &#123; fmt.Println(&quot;i的类型不是int&quot;) &#125; // 类型断言（不带检查，失败会panic） // s := i.(string) // 这会引发panic // 使用switch进行类型断言 i = &quot;hello&quot; switch v := i.(type) &#123; case int: fmt.Printf(&quot;这是一个整数: %d\\n&quot;, v) case string: fmt.Printf(&quot;这是一个字符串: %s\\n&quot;, v) case bool: fmt.Printf(&quot;这是一个布尔值: %t\\n&quot;, v) default: fmt.Printf(&quot;未知类型: %T\\n&quot;, v) &#125;&#125; 包结构 权限：所有成员在包内均可见，无论是不是在一个源码文件中。但只有首字母大写的为可导出成员，在包外可见。 源码必须使用UTF-8。 包内每个源文件都可以定义一个或多个初始化函数，但编译器不保证执行顺序。编译器先初始化全局变量，然后才开始执行初始化函数。最后才执行main包的main函数。 内部包：所有保存在internal目录下的包（包含自身）仅能被其父目录下的包（包含所有层次的子目录）访问。 反射反射是指在程序运行时动态地获取变量的类型信息和值信息的能力。Go语言提供了reflect包来支持反射。 1234567891011121314151617181920package mainimport ( &quot;fmt&quot; &quot;reflect&quot;)func main() &#123; var x float64 = 3.4 v := reflect.ValueOf(x) // 获取变量类型 fmt.Println(&quot;类型:&quot;, v.Type()) // 获取变量值 fmt.Println(&quot;值:&quot;, v.Float()) // 判断是否可以设置值（这里会返回false，因为v是x的副本） fmt.Println(&quot;可设置:&quot;, v.CanSet())&#125; 测试Go语言内置了测试框架，通过go test命令运行测试。测试文件通常以_test.go结尾。 123456789101112131415161718// example.gopackage examplefunc Add(a, b int) int &#123; return a + b&#125;// example_test.gopackage exampleimport &quot;testing&quot;func TestAdd(t *testing.T) &#123; result := Add(1, 2) if result != 3 &#123; t.Errorf(&quot;Add(1, 2) = %d; want 3&quot;, result) &#125;&#125; 运行测试命令： 1$ go test","categories":[{"name":"Go","slug":"Go","permalink":"https://wanqiang.wang/categories/Go/"},{"name":"开发","slug":"Go/开发","permalink":"https://wanqiang.wang/categories/Go/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Go","slug":"Go","permalink":"https://wanqiang.wang/tags/Go/"}]},{"title":"日志设计","slug":"日志设计","date":"2021-01-02T12:41:22.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/4fc7.html","permalink":"https://wanqiang.wang/post/4fc7.html","excerpt":"","text":"C语言版本12345678910111213141516171819202122/*********************************************** LOG DEFINE ***********************************************/// OFF FATAL ERROR WARN INFO DEBUG TRACE// 0 1 2 3 4 5 6#define OFF (0)#define FATAL (1)#define ERROR (2)#define WARN (3)#define INFO (4)#define DEBUG (5)#define TRACE (6)#define LOG_LEVEL DEBUG#define LOG(level, format, ...) \\ if(LOG_LEVEL &gt;= level) &#123; \\ fprintf(stderr, &quot;[%s|%s@%s,%d] &quot; format &quot;\\n&quot;, \\ #level, __func__, __FILE__, __LINE__, ##__VA_ARGS__ ); \\ &#125;","categories":[{"name":"代码","slug":"代码","permalink":"https://wanqiang.wang/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"程序","slug":"程序","permalink":"https://wanqiang.wang/tags/%E7%A8%8B%E5%BA%8F/"}]},{"title":"QMenu 自定义样式","slug":"QMenu 自定义样式","date":"2020-11-21T00:18:25.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/f9be.html","permalink":"https://wanqiang.wang/post/f9be.html","excerpt":"","text":"通过QSS 去掉菜单前面的对勾。用颜色表示 checked 状态。 123456789101112131415161718192021 QMenu::item &#123; padding:8px 32px;/*设置菜单项文字上下和左右的内边距，效果就是菜单中的条目左右上下有了间隔*/ margin:0px 8px;/*设置菜单项的外边距*/ border-bottom:1px solid #DBDBDB;/*为菜单项之间添加横线间隔*/ padding-left:0px; &#125; QMenu::item:selected &#123; /* when user selects item using mouse or keyboard */ background-color: #00fff9;/*这一句是设置菜单项鼠标经过选中的样式*/ &#125;QMenu::item:checked &#123; /* checked */ background-color: #ff0000;&#125;QMenu::indicator &#123; /* delete the default icon v */ image: none;&#125; 效果图：","categories":[{"name":"Qt","slug":"Qt","permalink":"https://wanqiang.wang/categories/Qt/"},{"name":"GUI","slug":"Qt/GUI","permalink":"https://wanqiang.wang/categories/Qt/GUI/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"https://wanqiang.wang/tags/Qt/"},{"name":"GUI","slug":"GUI","permalink":"https://wanqiang.wang/tags/GUI/"}]},{"title":"Win10 启用组策略","slug":"win10启用组策略","date":"2020-11-01T08:48:25.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/ad08.html","permalink":"https://wanqiang.wang/post/ad08.html","excerpt":"","text":"Win10 启用组策略WIN+R 运行输入 gpedit.msc 发现找不到这个命令。在网上查了一下，说可能是因为自已用的Win10是家庭版，不支持这个功能。 发现用下面的方法可以手动安装。亲测好用。 12345678910111213@echo offpushd &quot;%~dp0&quot;dir /b %systemroot%\\Windows\\servicing\\Packages\\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;gp.txtdir /b %systemroot%\\servicing\\Packages\\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;gp.txtfor /f %%i in (&#x27;findstr /i . gp.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;%systemroot%\\servicing\\Packages\\%%i&quot;pause 把上面的内容存到一个bat文件中。用管理员权限执行，就能自动安装。 然后就可以运行 gpedit.msc 了。","categories":[{"name":"win10","slug":"win10","permalink":"https://wanqiang.wang/categories/win10/"}],"tags":[{"name":"win10","slug":"win10","permalink":"https://wanqiang.wang/tags/win10/"}]},{"title":"Win10 微软拼音双拼设置","slug":"Win10微软拼音双拼设置","date":"2020-06-02T04:34:25.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/fbb2.html","permalink":"https://wanqiang.wang/post/fbb2.html","excerpt":"","text":"Win10 微软拼音双拼设置Win10 微软拼音添加小鹤双拼首先打开注册表，找到这个路径: 1计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\InputMethod\\Settings\\CHS 然后新建一个名为 UserDefinedDoublePinyinScheme0的字符串值，数值数据为 1小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt 然后在设置中将默认的输入法设置为小鹤双拼。 微软拼音支持自定义时间格式1234567# 关键字需要用 %% 来包裹yyyy 4 位年MM 2 位月dd 2 位日HH 2 位小时（24 小时制）mm 2 位分钟数ss 2 位秒数 示例： 123# 结果是这样的格式: 2020-02-07 12:36:52# 具体的格式参看, 详见 ref%yyyy%-%MM%-%dd% %HH%:%mm%:%ss%","categories":[{"name":"win10","slug":"win10","permalink":"https://wanqiang.wang/categories/win10/"},{"name":"输入法","slug":"win10/输入法","permalink":"https://wanqiang.wang/categories/win10/%E8%BE%93%E5%85%A5%E6%B3%95/"}],"tags":[{"name":"win10","slug":"win10","permalink":"https://wanqiang.wang/tags/win10/"},{"name":"输入法","slug":"输入法","permalink":"https://wanqiang.wang/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"}]},{"title":"Qt下载链接","slug":"Qt下载链接","date":"2020-05-29T18:47:10.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/b963.html","permalink":"https://wanqiang.wang/post/b963.html","excerpt":"","text":"所有Qt版本下载地址： http://download.qt.io/archive/qt/ 所有Qt Creator下载地址： http://download.qt.io/archive/qtcreator/ 所有Qt VS开发插件下载地址: http://download.qt.io/archive/vsaddin/ Qt相关下载大全 http://download.qt.io/","categories":[{"name":"Qt","slug":"Qt","permalink":"https://wanqiang.wang/categories/Qt/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"https://wanqiang.wang/tags/Qt/"},{"name":"Links","slug":"Links","permalink":"https://wanqiang.wang/tags/Links/"}]},{"title":"SPI 总线","slug":"SPI 总线","date":"2020-05-03T00:10:33.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/e5b.html","permalink":"https://wanqiang.wang/post/e5b.html","excerpt":"","text":"SPI总线技术详解1. 概述串行外设接口（Serial Peripheral Interface，SPI）是由Motorola公司于1979年提出的一种同步串行通信协议，主要用于短距离、高速的芯片间数据传输。SPI是一种高速、全双工、同步的通信总线，采用主从（Master-Slave）架构，广泛应用于嵌入式系统中微控制器与外围设备的通信，如传感器、存储设备、显示驱动器、网络控制器等。 2. SPI总线的特点与特性2.1 基本特点 同步通信：使用单独的时钟信号线进行数据同步 全双工通信：支持同时发送和接收数据 非差分信号：采用单端信号传输 总线式架构：通过片选信号实现多设备连接 主从通信模式：由主设备控制通信时序 2.2 主要优点 高速数据传输：速率通常可达几MHz到几十MHz，部分高性能SPI接口甚至支持上百MHz的数据传输 通信协议简单：协议实现相对简单，硬件开销小 全双工通信能力：可在同一时钟周期内同时发送和接收数据 灵活的时钟极性和相位配置：通过CPOL和CPHA参数可配置四种不同的通信模式，适应不同外设需求 支持多从设备：通过多个片选信号可连接多个从设备 2.3 主要缺点 没有内置的错误检测机制：不具备奇偶校验或CRC等错误校验功能 缺乏流量控制机制：没有应答信号确认数据是否被正确接收 信号线数量较多：相比I2C总线需要更多的信号线 抗噪声干扰能力较弱：采用单端信号传输，在嘈杂环境中可靠性较低 仅支持单主设备：总线上只能有一个主设备控制通信 3. SPI总线的硬件架构SPI总线通常需要4根信号线，在单向传输的情况下也可以使用3根信号线： MOSI（Master Out Slave In）：主设备数据输出，从设备数据输入 MISO（Master In Slave Out）：主设备数据输入，从设备数据输出 SCLK（Serial Clock）：串行时钟信号，由主设备产生并控制 CS&#x2F;SS（Chip Select&#x2F;Slave Select）：片选信号，由主设备控制，用于选择要通信的从设备 当系统中有多个SPI从设备时，主设备需要为每个从设备提供独立的片选信号。通信时，主设备通过拉低特定从设备的片选信号来选中该设备，未被选中的设备则忽略总线上的通信。 4. SPI通信协议详解4.1 通信时序与工作模式SPI通信有四种不同的工作模式，这些模式由时钟极性（CPOL，Clock Polarity）和时钟相位（CPHA，Clock Phase）两个参数决定： SPI模式 CPOL值 CPHA值 时钟空闲状态 数据采样边沿 Mode 0 0 0 低电平 上升沿 Mode 1 0 1 低电平 下降沿 Mode 2 1 0 高电平 下降沿 Mode 3 1 1 高电平 上升沿 时钟极性（CPOL）：决定SCLK在空闲状态时的电平状态 CPOL&#x3D;0：SCLK在空闲状态为低电平 CPOL&#x3D;1：SCLK在空闲状态为高电平 时钟相位（CPHA）：决定数据采样是在时钟的第一个边沿还是第二个边沿 CPHA&#x3D;0：在时钟的第一个边沿（从空闲状态开始的第一个跳变）进行数据采样 CPHA&#x3D;1：在时钟的第二个边沿进行数据采样 4.2 数据传输过程SPI数据传输过程如下： 主设备拉低目标从设备的片选信号（CS&#x2F;SS），表示开始通信 主设备通过SCLK线发送时钟信号 在每个时钟周期内： 主设备在MOSI线上输出一位数据 从设备在MISO线上输出一位数据（全双工通信） 根据CPHA的值，在特定的时钟边沿进行数据采样 数据传输完毕后，主设备释放片选信号（拉高CS&#x2F;SS），表示通信结束 SPI通信以字节（8位）或更大的数据帧为单位进行传输，数据通常以MSB（最高有效位）优先的方式发送，但也有一些设备支持LSB（最低有效位）优先的方式。 4.3 多字节传输与流控制SPI协议本身没有定义特定的流控制机制，也没有内置的地址或命令结构。在实际应用中，通常采用以下方式实现多字节数据传输： 命令+数据模式：首先发送命令字节，然后发送或接收数据字节 地址+数据模式：首先发送地址字节，然后发送或接收数据字节 自定义协议：根据特定应用需求定义数据帧格式和传输规则 需要注意的是，SPI通信没有像I2C那样的开始和停止信号，通信的开始和结束通过片选信号的拉低和拉高来表示。 5. SPI与其他通信协议的对比5.1 SPI与I2C的对比 特性 SPI I2C 数据线数量 4根（MOSI、MISO、SCLK、CS） 2根（SDA、SCL） 通信方式 全双工 半双工 传输速率 通常较高（可达几十MHz或更高） 相对较低（通常为100Kbps-4Mbps） 设备寻址 通过片选信号 通过地址帧 主设备数量 只能有一个主设备 支持多个主设备 错误检测 无内置机制 支持ACK&#x2F;NACK应答 抗干扰能力 较弱（单端信号） 较强（开漏输出+上拉电阻） 协议复杂度 相对简单 相对复杂 实现成本 较高（需要更多引脚） 较低 5.2 SPI、I2C、UART和CAN的应用场景对比 协议 应用场景 传输距离 速率 特点 SPI 板内芯片间通信（如MCU与传感器、显示屏、Flash等） 短距离（几厘米至几十厘米） 高（几MHz至几十MHz） 高速、全双工、同步、单主多从 I2C 板内芯片间通信（如MCU与低速率传感器、实时时钟等） 短距离（通常不超过1米） 中低（100Kbps-4Mbps） 多主多从、地址寻址、半双工 UART 设备间通信（如MCU与PC、模块间通信） 中等距离（通常不超过10米） 中低（通常不超过1Mbps） 异步、点对点、无需时钟线 CAN 工业控制、汽车电子等领域的网络通信 长距离（最远可达10公里，取决于速率） 中高（最高可达1Mbps） 多主、错误检测、优先级仲裁、高可靠性 SPI应用场景特点SPI适用于需要高速数据传输且对可靠性要求不是极高的短距离板内通信场景，如： 微控制器与外部Flash&#x2F;EEPROM存储芯片通信 图像传感器与处理器之间的数据传输 LCD&#x2F;OLED显示屏驱动 音频编解码器 模数&#x2F;数模转换器 I2C应用场景特点I2C适用于低速、多设备、对连接线数量敏感的应用场景，如： 传感器网络（温度、湿度、压力等传感器） 实时时钟模块 EEPROM存储 电源管理芯片 UART应用场景特点UART适用于设备间点对点通信，如： 计算机与外部设备通信（调试接口、串口设备） 模块间通信（如GPS模块、蓝牙模块等） 简单的串行通信链路 CAN应用场景特点CAN适用于需要高可靠性、长距离、多节点的网络通信场景，如： 汽车电子网络 工业控制系统 电梯控制 机器人控制系统 船舶电子系统 6. SPI接口的实现与设计考虑6.1 硬件实现SPI接口可以通过硬件或软件实现： 硬件SPI：大多数微控制器都内置了SPI控制器，可自动处理时序和数据传输 软件SPI：通过GPIO引脚和软件模拟SPI时序，适用于没有硬件SPI控制器的情况 6.2 设计注意事项 信号完整性：高速SPI通信需要考虑信号完整性问题，包括传输线阻抗匹配、信号反射、串扰等 电源去耦：为SPI设备提供良好的电源去耦，减少噪声干扰 接地处理：确保良好的接地，避免地环路 时钟频率选择：根据从设备的最高支持频率和传输距离选择合适的时钟频率 模式匹配：确保主设备和从设备的SPI工作模式（CPOL和CPHA）一致 片选信号处理：正确处理片选信号的时序，避免信号竞争 多从设备冲突：合理设计片选信号的控制逻辑，避免多从设备同时被选中 7. 总结SPI总线是一种高速、全双工、同步的串行通信协议，以其简单的实现和高速的数据传输特性，在嵌入式系统中得到了广泛的应用。尽管SPI协议在错误检测和多主设备支持方面存在一些局限性，但其在需要高速数据传输的短距离通信场景中仍然是首选方案之一。 在实际应用中，选择SPI还是其他通信协议（如I2C、UART、CAN等）应根据具体的应用需求、传输距离、速率要求、设备数量以及系统复杂度等因素综合考虑。","categories":[{"name":"外设","slug":"外设","permalink":"https://wanqiang.wang/categories/%E5%A4%96%E8%AE%BE/"},{"name":"嵌入式","slug":"外设/嵌入式","permalink":"https://wanqiang.wang/categories/%E5%A4%96%E8%AE%BE/%E5%B5%8C%E5%85%A5%E5%BC%8F/"}],"tags":[{"name":"外设","slug":"外设","permalink":"https://wanqiang.wang/tags/%E5%A4%96%E8%AE%BE/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://wanqiang.wang/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"}]},{"title":"常见图表与用途","slug":"常见图表与用途","date":"2020-02-05T01:49:55.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/639e.html","permalink":"https://wanqiang.wang/post/639e.html","excerpt":"","text":"主类 次类 用途 折线图 折线图 用于反应和时间相关的数据变化（趋势）。 面积图 用于反应主次之间基于时间的对比。 柱状图 柱状图 分类项目的数量比较。也能反应趋势。 条形图 分类项目的数量比较。 环状条形图 分类项目的数量比较。更能反应项目之间的数量关系。 南丁格尔玫瑰图 以夸张的形式来表示分类项目的数量对比 饼状图 饼状图 反映分类数据反占比例 旭日图 表示比例对比的同时，也表示层次关系 对状图 表示比例，可以多层线。 散点图 散点图 反应相关性和分布关系，两个变量 气泡图 反应相关性和分布关系，三个变量 带线散点 趋势线 地图 地图 反应空间信息 其它图 股价图/箱线图 反映数据分散情况 直方图 反映数据分布 瀑布图 数量变化的过程","categories":[{"name":"数据分析","slug":"数据分析","permalink":"https://wanqiang.wang/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"https://wanqiang.wang/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}]},{"title":"Qt对话框窗口设置","slug":"Qt对话框窗口设置","date":"2020-01-21T01:28:41.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/2de4.html","permalink":"https://wanqiang.wang/post/2de4.html","excerpt":"","text":"设置窗口标题1setWindowTitle(&quot;Touch Screen&quot;); 设置窗口固定大小1setFixedSize(QT_WINDOW_WIDTH_FOR_TOUCH, QT_WINDOW_HEIGHT_FOR_TOUCH); 设置窗口显示在另外一个显示器上12345QDesktopWidget* desktop = QApplication::desktop();if (desktop-&gt;screenCount() &gt; 1)&#123; setGeometry(desktop-&gt;screenGeometry(1));&#125; 在非主线程更新显示1QMetaObject::invokeMethod(this, &quot;asyncUpdateGui&quot;, Qt::QueuedConnection); 其中 asyncUpdateGui 的定义： 12private slots: Q_INVOKABLE void asyncUpdateGui(); 实现： 1234void xApplicationWindow::asyncUpdateGui()&#123; update();&#125;","categories":[{"name":"qt","slug":"qt","permalink":"https://wanqiang.wang/categories/qt/"},{"name":"c++","slug":"qt/c","permalink":"https://wanqiang.wang/categories/qt/c/"}],"tags":[{"name":"qt","slug":"qt","permalink":"https://wanqiang.wang/tags/qt/"}]},{"title":"解决 package 'fontconfig' not found","slug":"解决 package 'fontconfig' not found","date":"2020-01-20T09:32:18.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/8e2e.html","permalink":"https://wanqiang.wang/post/8e2e.html","excerpt":"","text":"解决 package ‘fontconfig’ not foundWhenever you get messages about missing packages (or suggestions to modify your PKG_CONFIG_PATH) during a build, it usually indicates that you are missing the corresponding development package - which is typically separate from the runtime package that is normally installed on the system. In this case you have the most recent version of fontconfig but are probably missing the corresponding libfontconfig1-dev package. 正确的解决方法是安装：libfontconfig1-dev","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"},{"name":"compile","slug":"linux/compile","permalink":"https://wanqiang.wang/categories/linux/compile/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/tags/linux/"},{"name":"compile","slug":"compile","permalink":"https://wanqiang.wang/tags/compile/"}]},{"title":"DD-WRT 通过SSH使用WOL","slug":"DD-WRT通过SSH使用WOL","date":"2020-01-06T08:13:03.000Z","updated":"2025-10-21T02:38:15.423Z","comments":true,"path":"post/4b92.html","permalink":"https://wanqiang.wang/post/4b92.html","excerpt":"","text":"WOL through Telnet&#x2F;SSHNote: This is the preferred method to send WOL magic packets remotely. If you have local or remote Telnet&#x2F;SSH access to your router, you can wake up a machine on the LAN by using the following command: 1/usr/sbin/wol -i 192.168.1.255 -p PP AA:BB:CC:DD:EE:FF Note that the full path to “&#x2F;usr&#x2F;sbin&#x2F;wol” is important. Simply “wol” will not work. Substitute AA:BB:CC:DD:EE:FF with the actual MAC address of the computer which you wish to boot remotely. Likewise, replace 192.168.1.255 with the actual broadcast address of the network (192.168.1.255 is the broadcast address when the machine has an IP of 192.168.1.x and subnet mask of 255.255.255.0). Replace “PP” with the port number your machine listens on (usually 7 or 9). 1/usr/sbin/wol -i 192.168.1.255 -p 9 24:5E:BE:32:C8:EB","categories":[{"name":"dd-wrt","slug":"dd-wrt","permalink":"https://wanqiang.wang/categories/dd-wrt/"},{"name":"路由器","slug":"dd-wrt/路由器","permalink":"https://wanqiang.wang/categories/dd-wrt/%E8%B7%AF%E7%94%B1%E5%99%A8/"}],"tags":[{"name":"dd-wrt","slug":"dd-wrt","permalink":"https://wanqiang.wang/tags/dd-wrt/"},{"name":"路由器","slug":"路由器","permalink":"https://wanqiang.wang/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"}]},{"title":"iText学习","slug":"iText学习","date":"2020-01-05T15:21:01.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/649d.html","permalink":"https://wanqiang.wang/post/649d.html","excerpt":"","text":"页眉与页脚iText5中并没有之前版本HeaderFooter对象设置页眉和页脚，可以利用PdfPageEventHelper来完成页眉页脚的设置工作。PdfPageEventHelper中包含以下事件处理器。 12345onOpenDocument() — 当打开一个文档时触发，可以用于初始化文档的全局变量。onStartPage() — 当一个页面初始化时触发，可用于初始化页面的设置参数，但是注意这个函数触发时，该页面并没有创建好，不用利用这个函数添加内容，最好利用onEndPage()处理页面的初始化。onEndPage() — 在创建一个新页面完成但写入内容之前触发，是添加页眉、页脚、水印等最佳时机。onCloseDocument() — 在文档关闭之前触发，可以用于释放一些资源。onCloseDocument() — 在文档关闭之前触发，可以用于释放一些资源。 要想出发事件需要在程序中添加事件 如下 12PdfReportM1HeaderFooter footer=new PdfReportM1HeaderFooter();writer.setPageEvent(footer); 该类PdfReportM1HeaderFooter继承自PdfPageEventHelper所以可以直接添加、 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183package demo;/** * Project Name:report * File Name:PdfReportM1HeaderFooter.java * Package Name:com.riambsoft.report.pdf * Date:2013-9-16上午08:59:00 * Copyright (c) 2013, riambsoft All Rights Reserved. * */import java.io.IOException;import com.itextpdf.text.Document;import com.itextpdf.text.DocumentException;import com.itextpdf.text.Element;import com.itextpdf.text.Font;import com.itextpdf.text.PageSize;import com.itextpdf.text.Phrase;import com.itextpdf.text.Rectangle;import com.itextpdf.text.pdf.BaseFont;import com.itextpdf.text.pdf.ColumnText;import com.itextpdf.text.pdf.PdfContentByte;import com.itextpdf.text.pdf.PdfPageEventHelper;import com.itextpdf.text.pdf.PdfTemplate;import com.itextpdf.text.pdf.PdfWriter;/** * ClassName:PdfReportM1HeaderFooter &lt;br/&gt; * Function: TODO ADD FUNCTION. &lt;br/&gt; * Reason: TODO ADD REASON. &lt;br/&gt; * Date: 2013-9-13 上午08:59:00 &lt;br/&gt; * * @author 落雨 * @version 394263788(QQ) * @since JDK 1.5 * @see http://hi.baidu.com/ae6623 */public class PdfReportM1HeaderFooter extends PdfPageEventHelper &#123; /** * 页眉 */ public String header = &quot;&quot;; /** * 文档字体大小，页脚页眉最好和文本大小一致 */ public int presentFontSize = 12; /** * 文档页面大小，最好前面传入，否则默认为A4纸张 */ public Rectangle pageSize = PageSize.A4; // 模板 public PdfTemplate total; // 基础字体对象 public BaseFont bf = null; // 利用基础字体生成的字体对象，一般用于生成中文文字 public Font fontDetail = null; /** * * Creates a new instance of PdfReportM1HeaderFooter 无参构造方法. * */ public PdfReportM1HeaderFooter() &#123; &#125; /** * * Creates a new instance of PdfReportM1HeaderFooter 构造方法. * * @param yeMei 页眉字符串 * @param presentFontSize 数据体字体大小 * @param pageSize 页面文档大小，A4，A5，A6横转翻转等Rectangle对象 */ public PdfReportM1HeaderFooter(String yeMei, int presentFontSize, Rectangle pageSize) &#123; this.header = yeMei; this.presentFontSize = presentFontSize; this.pageSize = pageSize; &#125; public void setHeader(String header) &#123; this.header = header; &#125; public void setPresentFontSize(int presentFontSize) &#123; this.presentFontSize = presentFontSize; &#125; /** * * TODO 文档打开时创建模板 * * @see com.itextpdf.text.pdf.PdfPageEventHelper#onOpenDocument(com.itextpdf.text.pdf.PdfWriter, * com.itextpdf.text.Document) */ public void onOpenDocument(PdfWriter writer, Document document) &#123; total = writer.getDirectContent().createTemplate(50, 50);// 共 页 的矩形的长宽高 &#125; /** * * TODO 关闭每页的时候，写入页眉，写入&#x27;第几页共&#x27;这几个字。 * * @see com.itextpdf.text.pdf.PdfPageEventHelper#onEndPage(com.itextpdf.text.pdf.PdfWriter, * com.itextpdf.text.Document) */ public void onEndPage(PdfWriter writer, Document document) &#123; try &#123; if (bf == null) &#123; bf = BaseFont.createFont(&quot;STSong-Light&quot;, &quot;UniGB-UCS2-H&quot;, false); &#125; if (fontDetail == null) &#123; fontDetail = new Font(bf, presentFontSize, Font.NORMAL);// 数据体字体 &#125; &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; // 1.写入页眉 ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_LEFT, new Phrase(header, fontDetail), document.left(), document.top() + 20, 0); // 2.写入前半部分的 第 X页/共 int pageS = writer.getPageNumber(); String foot1 = &quot;第 &quot; + pageS + &quot; 页 /共&quot;; Phrase footer = new Phrase(foot1, fontDetail); // 3.计算前半部分的foot1的长度，后面好定位最后一部分的&#x27;Y页&#x27;这俩字的x轴坐标，字体长度也要计算进去 = len float len = bf.getWidthPoint(foot1, presentFontSize); // 4.拿到当前的PdfContentByte PdfContentByte cb = writer.getDirectContent(); // 自己增加的 if (pageS == 1) &#123; Phrase footerLeft = new Phrase(&quot;978-1-4799-0530-031.00 ©2013 IEEE&quot;, fontDetail); ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, footerLeft, document.left(), document.bottom() - 20, 0); &#125; // 5.写入页脚1，x轴就是(右margin+左margin + right() -left()- len)/2.0F // 再给偏移20F适合人类视觉感受，否则肉眼看上去就太偏左了 // ,y轴就是底边界-20,否则就贴边重叠到数据体里了就不是页脚了；注意Y轴是从下往上累加的，最上方的Top值是大于Bottom好几百开外的。 ColumnText.showTextAligned(cb, Element.ALIGN_CENTER, footer, (document.rightMargin() + document.right() + document.leftMargin() - document.left() - len) / 2.0F + 20F, document.bottom() - 20, 0); // 6.写入页脚2的模板（就是页脚的Y页这俩字）添加到文档中，计算模板的和Y轴,X=(右边界-左边界 - 前半部分的len值)/2.0F + len ， y // 轴和之前的保持一致，底边界-20 cb.addTemplate(total, (document.rightMargin() + document.right() + document.leftMargin() - document.left()) / 2.0F + 20F, document.bottom() - 20); // 调节模版显示的位置 &#125; /** * * TODO 关闭文档时，替换模板，完成整个页眉页脚组件 * * @see com.itextpdf.text.pdf.PdfPageEventHelper#onCloseDocument(com.itextpdf.text.pdf.PdfWriter, * com.itextpdf.text.Document) */ public void onCloseDocument(PdfWriter writer, Document document) &#123; // 7.最后一步了，就是关闭文档的时候，将模板替换成实际的 Y 值,至此，page x of y 制作完毕，完美兼容各种文档size。 total.beginText(); total.setFontAndSize(bf, presentFontSize);// 生成的模版的字体、颜色 String foot2 = &quot; &quot; + (writer.getPageNumber() - 1) + &quot; 页&quot;; total.showText(foot2);// 模版显示的内容 total.endText(); total.closePath(); &#125;&#125; 页边距Isn’t it possible for you to use HtmlConverter#convertToElements method. It returns List as a result and then you can add its elements to a document with set margins: 1234567Document document = new Document(pdfDocument);List list = HtmlConverter.convertToElements(new FileInputStream(htmlSource));for (IElement element : list) &#123;if (element instanceof IBlockElement) &#123;document.add((IBlockElement) element);&#125;&#125; Another approach: in your html just introduce the @page rule which sets the margins you need, for example: 1@page &#123;margin: 0;&#125; Yet another solution: implement your own custom tag worker for tag and set margins on its level. For example, to set zero margins one could create tag the next worker: 123456789101112131415public class CustomTagWorkerFactory extends DefaultTagWorkerFactory &#123;public ITagWorker getCustomTagWorker(IElementNode tag, ProcessorContext context) &#123;if (TagConstants.HTML.equals(tag.name())) &#123;return new ZeroMarginHtmlTagWorker(tag, context);&#125;return null;&#125;&#125;public class ZeroMarginHtmlTagWorker extends HtmlTagWorker &#123;public ZeroMarginHtmlTagWorker(IElementNode element, ProcessorContext context) &#123;super(element, context);Document doc = (Document) getElementResult();doc.setMargins(0, 0, 0, 0);&#125;&#125; and pass it as a ConverterProperties parameter to Htmlconverter: converterProperties.setTagWorkerFactory(new CustomTagWorkerFactory());HtmlConverter.convertToPdf(new File(htmlPath), new File(pdfPath), converterProperties); 表格跨页问题 代码的处理方式 pdfHtml的一种处理方式I had a similar issue of trying to keep together content within a div. I applied the following css property and this kept everything together. This worked with itext7 pdfhtml. 1page-break-inside: avoid; PdfPage转换成图片 生成image对象https://stackoverflow.com/questions/37809019/itext7-pdf-to-image Please read the official documentation for iText 7, more specifically Chapter 6: Reusing existing PDF documentsIn PDF, there’s the concept of _Form XObject_s. A Form XObject is a piece of PDF content that is stored outside the content stream of a page, hence XObject which stands for eXternal Object. The use of the word Form in Form XObject could be confusing, because people might be thinking of a form as in a fillable form with fields. To avoid that confusing, we introduced the term PdfTemplate in iText 5.The class PdfImportedPage you refer to was a subclass of PdfTemplate: it was a piece of PDF syntax that could be reused in another page. Over the years, we noticed that people also got confused by the word PdfTemplate.In iText 7, we returned to the basics. When talking about a Form XObject, we use the class PdfFormXObject. When talking about a page in a PDF file, we use the class PdfPage.This is how we get a PdfPage from an existing document: 12PdfDocument origPdf = new PdfDocument(new PdfReader(src));PdfPage origPage = origPdf.getPage(1); This is how we use that page in a new document: 12PdfDocument pdf = new PdfDocument(new PdfWriter(dest));PdfFormXObject pageCopy = origPage.copyAsFormXObject(pdf); If you want to use that pageCopy as an Image, just create it like this: 1Image image = new Image(pageCopy); 存成图片(验证了这种方法不可行)https://stackoverflow.com/questions/24940813/saving-com-itextpdf-text-image-as-a-image-fileJust convert the Barcode39 itext image into an AWT image using createAwtImage: 1java.awt.Image awtImage = code39.createAwtImage(Color.BLACK, Color.WHITE); Then convert it to a BufferedImage and store it: 123456BufferedImage bImage= new BufferedImage(awtImage.getWidth(), awtImage.getHeight(), BufferedImage.TYPE_INT_RGB);Graphics2D g = bImage.createGraphics();g.drawImage(awtImage, 0, 0, null);g.dispose();File outputfile = new File(&quot;saved.png&quot;);ImageIO.write(bImage, &quot;jpg&quot;, new File(&quot;code39.jpg&quot;));","categories":[{"name":"iText","slug":"iText","permalink":"https://wanqiang.wang/categories/iText/"}],"tags":[{"name":"iText","slug":"iText","permalink":"https://wanqiang.wang/tags/iText/"},{"name":"排版","slug":"排版","permalink":"https://wanqiang.wang/tags/%E6%8E%92%E7%89%88/"}]},{"title":"blog复活","slug":"复活blog","date":"2020-01-04T08:14:16.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/dc95.html","permalink":"https://wanqiang.wang/post/dc95.html","excerpt":"","text":"回顾之前在阿里云上花钱买了一个网页空间，用了好几年，刚开始还挺好的，但最近半年，完全不能用。频繁刷新都能被关黑屋。还遇到有人恶意访问。 今天终于花时间弄清楚了 github + hexo + next + travis-ci 的blog组合。 搞清楚了hexo 的 tags 和 categories 的启用方法。 从目前的情况来说，与之前的 wordpress 对比，显示完美，当然写作没有之前的方便。 还支持 https，并且 github 技术加持，不担心被人恶意黑掉。自己的域名也能完美支持。 总之，blog 重新复活。 如何快速创建一个github个人网站？克隆一个已经存在的网站:)，比如我这个网站。然后把source目录中的内容删除掉。在调整一下自己的配置就可以了。 hexo blog 如何创建404页面有两种方法： 可以自己创建一个 404.html 页面直接放到 source 目录下面。 也可以在 source 目录下面创建一个 404 的文件夹， 然后面在里面创建一个 index.md 的文件。 可以使用这个命令创建 hexo new page &quot;404&quot; 图床如何用？ 七牛的不错，可以绑定自己的域名。做好备份，如果那天免费不能用了，换地方应该也不需要在文章里面改链接。 还有一个自动上传的工作可用。 MPic官方网址：http://mpic.lzhaofu.cn","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://wanqiang.wang/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://wanqiang.wang/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://wanqiang.wang/tags/next/"}]},{"title":"Thinkpad 小红点恢复Win10中键滚动功能","slug":"Thinkpad小红点恢复Win10中键滚动功能","date":"2020-01-03T23:26:22.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/3fe7.html","permalink":"https://wanqiang.wang/post/3fe7.html","excerpt":"","text":"问题在Windows 10下面，按住中键，拔动小红点，页面滚动的同时，光标也会一起跑。控制面板中也找不到设置的地方。 解决方案需要修改注册表：在HKEY_CURRENT_USER\\Software\\Synaptics\\SynTPEnh\\UltraNavPS2中，把TrackPointModeFunction的值修改一下即可。原为：”TrackPointModeFunction”&#x3D;dword:00000011改为：”TrackPointModeFunction”&#x3D;dword:00000010这样就跟以前使用完全相同了，中键点击是小手或指针，滚动是鼠标中键滚动的图标，一切完美。","categories":[],"tags":[],"author":"Wanqiang"},{"title":"QNAP安装Transmission下载工具","slug":"QNAP安装transmission","date":"2019-07-16T14:00:06.000Z","updated":"2025-10-21T02:38:15.425Z","comments":false,"path":"post/f9d4.html","permalink":"https://wanqiang.wang/post/f9d4.html","excerpt":"","text":"QNAP安装Transmission下载工具本文介绍如何在QNAP NAS上通过Docker安装Transmission下载工具，这是一个轻量级的BT下载客户端。 前提条件 QNAP NAS已安装并运行Docker应用 已创建用于存放Transmission数据的共享文件夹 安装步骤方法一：使用Docker命令行安装通过SSH登录到QNAP NAS，执行以下Docker命令： 1234567891011121314docker create \\ --name=transmission \\ -e PUID=1000 \\ -e PGID=1000 \\ -e TZ=Asia/Shanghai \\ -e TRANSMISSION_WEB_HOME=/combustion-release/ `#可选的Web界面` \\ -p 9091:9091 \\ -p 51413:51413 \\ -p 51413:51413/udp \\ -v /share/homes/docker/trans/data:/config \\ -v /share/homes/docker/trans/downloads:/downloads \\ -v /share/homes/docker/trans/watch:/watch \\ --restart unless-stopped \\ linuxserver/transmission 方法二：使用QNAP Container Station安装 打开QNAP Container Station 搜索”linuxserver&#x2F;transmission” 下载并创建容器 在高级设置中配置端口映射和卷映射 设置环境变量 启动容器 参数说明环境变量 PUID&#x3D;1000：用户ID，建议设置为admin用户的ID PGID&#x3D;1000：组ID，建议设置为administrators组的ID TZ&#x3D;Asia&#x2F;Shanghai：时区设置，使用中国标准时间 TRANSMISSION_WEB_HOME：可选，自定义Web界面 端口映射 9091:9091：Web界面访问端口 51413:51413：BT下载TCP端口 51413:51413&#x2F;udp：BT下载UDP端口 卷映射 &#x2F;share&#x2F;homes&#x2F;docker&#x2F;trans&#x2F;data:&#x2F;config：配置文件存放路径 &#x2F;share&#x2F;homes&#x2F;docker&#x2F;trans&#x2F;downloads:&#x2F;downloads：下载文件保存路径 &#x2F;share&#x2F;homes&#x2F;docker&#x2F;trans&#x2F;watch:&#x2F;watch：监控文件夹，放入此文件夹的种子会自动开始下载 访问Transmission安装完成后，通过以下方式访问Transmission： 打开浏览器，输入http://QNAP_IP:9091 首次访问不需要登录密码（建议设置密码） 配置说明设置登录密码 进入Web界面 点击右上角设置图标 选择”远程”选项卡 勾选”要求身份验证” 设置用户名和密码 点击”保存设置” 配置下载设置 进入Web界面 点击右上角设置图标 选择”下载”选项卡 设置下载文件夹、限速等参数 点击”保存设置” 常见问题1. 无法访问Web界面 检查容器是否正常运行 确认端口映射是否正确 检查防火墙设置 2. 下载速度慢 检查QNAP的网络连接 确保端口51413已在路由器上进行端口转发 调整Transmission的下载设置 3. 权限问题 确认PUID和PGID设置正确 检查共享文件夹的权限设置 提示 建议定期备份Transmission的配置文件和种子 合理设置上传限速，避免影响其他网络应用 使用监控文件夹功能可以方便地管理下载任务","categories":[],"tags":[{"name":"qnap","slug":"qnap","permalink":"https://wanqiang.wang/tags/qnap/"},{"name":"下载","slug":"下载","permalink":"https://wanqiang.wang/tags/%E4%B8%8B%E8%BD%BD/"},{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/tags/docker/"},{"name":"transmission","slug":"transmission","permalink":"https://wanqiang.wang/tags/transmission/"}]},{"title":"xslt keep-together.within-page 在Fop中的形为","slug":"xslt-keep-together-within-page-xslt keep-together.within-page在Fop中的形为","date":"2019-07-16T00:59:28.000Z","updated":"2025-10-21T02:38:15.427Z","comments":false,"path":"post/752.html","permalink":"https://wanqiang.wang/post/752.html","excerpt":"","text":"1keep-together.within-page auto是默认形为, 写不写都是一样的。 always是强制在一页中。如果当前限制的内容超过一页时，会从页面下方溢出。 指定一个数字。测试 1 的形为是这样的：会换页将当前内容保持在一页中。但如果当前内容超过一页时，也会将多余的内容显示到下一页中，保证不会将内容溢出到纸的外面。 https://www.w3.org/TR/xsl11/#keep-together","categories":[],"tags":[]},{"title":"xslt调试技巧","slug":"xslt调试技巧","date":"2019-07-09T11:21:47.000Z","updated":"2025-10-21T02:38:15.427Z","comments":false,"path":"post/4aae.html","permalink":"https://wanqiang.wang/post/4aae.html","excerpt":"","text":"https://www.ibm.com/developerworks/cn/xml/x-tipxslmsg.html","categories":[],"tags":[]},{"title":"qnap国外商店","slug":"qnap国外商店","date":"2019-06-21T04:25:36.000Z","updated":"2025-10-21T02:38:15.427Z","comments":false,"path":"post/bf0e.html","permalink":"https://wanqiang.wang/post/bf0e.html","excerpt":"","text":"https://qnapclub.eu/index.php/en","categories":[],"tags":[]},{"title":"Linux Lab","slug":"linux-lab","date":"2019-06-14T01:03:54.000Z","updated":"2025-10-21T02:38:15.426Z","comments":false,"path":"post/46e4.html","permalink":"https://wanqiang.wang/post/46e4.html","excerpt":"","text":"linux 内核学习资源，暂时收集。还没有详细研究。 http://tinylab.org/linux-lab/","categories":[],"tags":[]},{"title":"树莓派docker运行报错","slug":"树莓派docker运行报错","date":"2019-06-07T00:54:02.000Z","updated":"2025-10-21T02:38:15.428Z","comments":false,"path":"post/59a5.html","permalink":"https://wanqiang.wang/post/59a5.html","excerpt":"","text":"解决方案This is because the docker service is not automatically started after an install. You can start the docker service in Ubuntu and its derivatives (looking at you Linux Mint) by typing: sudo service docker start To check that docker started, this file should exist: ls -la &#x2F;var&#x2F;run&#x2F;docker.sock","categories":[],"tags":[]},{"title":"树莓派的Web ssh","slug":"树莓派的Web ssh","date":"2019-06-03T07:26:13.000Z","updated":"2025-10-21T02:38:15.428Z","comments":false,"path":"post/8033.html","permalink":"https://wanqiang.wang/post/8033.html","excerpt":"","text":"https://www.instructables.com/id/Raspberry-Pi-online-SSH-easy-way/","categories":[],"tags":[]},{"title":"如何看mdstat文件","slug":"如何看mdstat文件","date":"2019-06-01T22:34:29.000Z","updated":"2025-10-21T02:38:15.427Z","comments":false,"path":"post/eb10.html","permalink":"https://wanqiang.wang/post/eb10.html","excerpt":"","text":"指导文件： https://raid.wiki.kernel.org/index.php/Mdstat","categories":[],"tags":[]},{"title":"nextcloud 移动数据位置","slug":"nextcloud 移动数据位置","date":"2019-06-01T12:33:44.000Z","updated":"2025-10-21T02:38:15.427Z","comments":false,"path":"post/77ce.html","permalink":"https://wanqiang.wang/post/77ce.html","excerpt":"","text":"下面是官方说明： https://github.com/nextcloud/nextcloud-snap/wiki/Change-data-directory-to-use-another-disk-partition Removable media Also note that the interface providing the ability to access removable media is not automatically connected upon install, so if you’d like to use external storage (or otherwise use a device in &#x2F;media for data), you need to give the snap permission to access removable media by connecting that interface: $ sudo snap connect nextcloud:removable-media 可以使用 mount –bind 命令挂载已有目录。要实现自动挂载，可以写在 &#x2F;etc&#x2F;fstab 里面。","categories":[],"tags":[]},{"title":"Python 2 与 Python 3 共存方案","slug":"python2-python3共存","date":"2019-05-22T01:28:52.000Z","updated":"2025-10-21T02:38:15.427Z","comments":false,"path":"post/fedb.html","permalink":"https://wanqiang.wang/post/fedb.html","excerpt":"","text":"Python 2 与 Python 3 共存方案在许多开发环境中，可能需要同时使用 Python 2 和 Python 3 两个版本。以下是实现两个版本共存的详细步骤： 安装步骤 下载安装包：分别下载 Python 2 和 Python 3 的安装包 正常安装：按顺序安装 Python 2 和 Python 3 配置环境变量：将两个版本的安装路径和 Scripts 目录添加到系统环境变量中 例如 Python 2 的路径：C:\\Python27 和 C:\\Python27\\Scripts Python 3 的路径：C:\\Python3x 和 C:\\Python3x\\Scripts 修改解释器名称为了区分两个版本的 Python 解释器，可以修改可执行文件的名称： 进入 Python 2 的安装目录 将 python.exe 重命名为 python2.exe 将 pythonw.exe 重命名为 pythonw2.exe 同样地，对 Python 3 进行类似操作： 将 python.exe 重命名为 python3.exe 将 pythonw.exe 重命名为 pythonw3.exe 验证安装在命令行中输入以下命令验证安装是否成功： 12345# 检查 Python 2 版本python2 --version# 检查 Python 3 版本python3 --version pip 的使用pip 也需要区分版本： 12345# 使用 Python 2 的 pippython2 -m pip install 包名# 使用 Python 3 的 pippython3 -m pip install 包名 编写兼容两个版本的代码如果需要编写同时兼容 Python 2 和 Python 3 的代码，可以使用以下工具： 1. future 模块12345678# 使用 Python 3 的 print 函数from __future__ import print_function# 使用 Python 3 的除法行为from __future__ import division# 使用 Python 3 的 Unicode 字符串from __future__ import unicode_literals 2. six 库six 是一个专门用于解决 Python 2 和 Python 3 兼容性问题的库： 12# 安装 sixpip install six 使用示例： 123456789import sixif six.PY2: print(&quot;这是 Python 2&quot;)else: print(&quot;这是 Python 3&quot;)# 在两个版本中都能正常工作的代码text = six.u(&quot;Unicode 字符串&quot;) 官方文档有关更多详细信息，请参考官方文档： Python 3 安装指南：https://docs.python.org/3/installing/ six 库官方文档：https://six.readthedocs.io/ 通过以上方法，您可以在同一台计算机上无缝地使用 Python 2 和 Python 3，满足不同项目的需求。","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://wanqiang.wang/tags/Python/"},{"name":"环境配置","slug":"环境配置","permalink":"https://wanqiang.wang/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}]},{"title":"Linux打印机管理","slug":"Linux打印机管理","date":"2019-04-08T07:03:40.000Z","updated":"2025-10-21T02:38:15.424Z","comments":false,"path":"post/2076.html","permalink":"https://wanqiang.wang/post/2076.html","excerpt":"","text":"lpq -a &#x2F;&#x2F;显示出目前所有打印机的工作队列情况 lprm 11 &#x2F;&#x2F;取消11号打印机作业 lpq -l -P Hp2015 &#x2F;&#x2F;用详细方式显示打印机Hp2015作业 lpstat -t ：列出目前的“打印系统”状态，不只包括打印机而已 暂停或者开始打印机： 重新开始打印机 sudo cupsenable HP_LaserJet_1020 禁用打印机 sudo cupsdisable HP_LaserJet_1020","categories":[],"tags":[]},{"title":"snap 方式安装的 nextcloud 设置默认端口","slug":"snap 方式安装的 nextcloud 设置默认端口","date":"2019-02-21T06:18:44.000Z","updated":"2025-10-21T02:38:15.427Z","comments":false,"path":"post/2ef5.html","permalink":"https://wanqiang.wang/post/2ef5.html","excerpt":"","text":"比如改成81端口，使用命令sudo snap set nextcloud ports.http&#x3D;81","categories":[],"tags":[]},{"title":"解决家里面打印机暂停的问题","slug":"解决家里面打印机暂停的问题","date":"2018-08-31T13:58:15.000Z","updated":"2025-10-21T02:38:15.428Z","comments":false,"path":"post/a678.html","permalink":"https://wanqiang.wang/post/a678.html","excerpt":"","text":"按下面图片所示的界面，去重新开始打印机就可以。","categories":[],"tags":[]},{"title":"加快QWebview中执行Javascript的速度","slug":"加快QWebview中执行Javascript的速度","date":"2018-08-13T11:37:46.000Z","updated":"2025-10-21T02:38:15.427Z","comments":false,"path":"post/7bc4.html","permalink":"https://wanqiang.wang/post/7bc4.html","excerpt":"","text":"问题描述在使用Qt的QWebView执行JavaScript代码时，可能会遇到执行速度非常慢且内存占用过高的问题。这通常发生在执行包含jQuery的代码时。 问题原因经过分析发现，问题的根源在于：Qt会自动评估JavaScript代码最后一条语句的返回值，并将其转换为QVariant对象。当使用jQuery时，jQuery函数通常会返回jQuery对象本身，而Qt会递归地评估整个jQuery对象，这导致了大量的时间和内存消耗。 值得注意的是，之前有些开发者尝试使用console.log()来解决这个问题，实际上真正起作用的不是console.log()本身，而是它返回的null值。 解决方案最简单的解决方案是在JavaScript代码末尾添加; null，这样就不会返回复杂的jQuery对象，而是返回一个简单的null值，从而避免了Qt对复杂对象的递归评估。 示例代码12345// 优化前myWebElement-&gt;evaluateJavaScript(myScript);// 优化后myWebElement-&gt;evaluateJavaScript(myScript + &quot;; null&quot;); 如果您在使用QWebView执行JavaScript时发现速度异常缓慢，请尝试上述方法，通常能显著提高执行效率并降低内存占用。","categories":[],"tags":[{"name":"Qt","slug":"Qt","permalink":"https://wanqiang.wang/tags/Qt/"},{"name":"QWebView","slug":"QWebView","permalink":"https://wanqiang.wang/tags/QWebView/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://wanqiang.wang/tags/JavaScript/"},{"name":"性能优化","slug":"性能优化","permalink":"https://wanqiang.wang/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"}]},{"title":"QWizard不能显示完成与取消按钮的问题","slug":"QWizard不能显示完成与取消按钮的问题","date":"2018-08-10T10:48:49.000Z","updated":"2025-10-21T02:38:15.425Z","comments":false,"path":"post/93ca.html","permalink":"https://wanqiang.wang/post/93ca.html","excerpt":"","text":"我使用的是Qt5.4.2, 遇到这个问题。对话框显示出来后，用鼠标改变一下大小就能显示出来。看起来像Qt的bug。 经反复尝试，发现修改QWizard的属性styleSheet为ClassicStyle就可以解决这个问题。 具体原因不清楚。","categories":[],"tags":[]},{"title":"Windows远程桌面连接Linux","slug":"Windows远程桌面连接Linux","date":"2018-07-11T10:58:04.000Z","updated":"2025-10-21T02:38:15.426Z","comments":false,"path":"post/d16f.html","permalink":"https://wanqiang.wang/post/d16f.html","excerpt":"","text":"Windows连接Linux 在Linux装下xrdp软件 1234561、安装xrdp sudo apt-get install xrdp 2、配置xrdp /etc/xrdp/xrdp.ini 复制一个配置将其中的port 配置成5900及名称改下， service xrdp restart 3、安装vino sudo apt-get install vino 4、vino-preference 将第1 个开启 5、gsettings set org.gnome.Vino require-encryption false 6、/usr/lib/vino/vino-server/","categories":[],"tags":[]},{"title":"Redmine 联接 https 地址的svn服务器","slug":"Redmine 联接 https 地址的svn服务器","date":"2018-06-23T04:22:45.000Z","updated":"2025-10-21T02:38:15.425Z","comments":false,"path":"post/80f1.html","permalink":"https://wanqiang.wang/post/80f1.html","excerpt":"","text":"https://blog.csdn.net/taonull/article/details/39249729 1.打开redmine控制台； 2.运行svn list –xml https://svn地址； 3.提示证书时选择p（永久保存ssl凭证）； 4.运行成功后，找到subversion_adapter.rb(redmine文件夹\\apps\\redmine\\htdocs\\lib\\redmine\\scm\\adapters)，找到 def credentials_string str &lt;&lt; &quot; --username #{shell_quote(@login)}&quot; unless @login.blank? str &lt;&lt; &quot; --password #{shell_quote(@password)}&quot; unless @login.blank? || @password.blank? str &lt;&lt; &quot; --no-auth-cache --non-interactive&quot; 修改为： str &lt;&lt; &quot; --username #{shell_quote(@login)}&quot; unless @login.blank? str &lt;&lt; &quot; --password #{shell_quote(@password)}&quot; unless @login.blank? || @password.blank? str &lt;&lt; &quot; --trust-server-cert --no-auth-cache --non-interactive --config-dir \\&quot;c:/Users/Administrator/AppData/Roaming/Subversion\\&quot;&quot;","categories":[],"tags":[]},{"title":"Thinkpad P50 更新后不能唤醒的问题","slug":"Thinkpad P50 更新后不能唤醒的问题","date":"2018-05-12T05:38:00.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/ef9f.html","permalink":"https://wanqiang.wang/post/ef9f.html","excerpt":"","text":"显卡驱动问题：在Bios里面把集显禁用，就不会有这个问题。 但是按下面的这个链接处理，也能解决问题。 https://jingyan.baidu.com/article/c275f6ba308652e33d7567f8.html","categories":[],"tags":[]},{"title":"Android 编译问题：Could not find com.android.tools.lint:lint-gradle:26.1.2.","slug":"android编译问题lint-gradle","date":"2018-04-30T02:35:31.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/53b3.html","permalink":"https://wanqiang.wang/post/53b3.html","excerpt":"","text":"编译时报如下的错误： 12FAILURE: Build failed with an exception. * What went wrong: Execution failed for task &#x27;:app:lintVitalRelease&#x27;. &gt; Could not resolve all files for configuration &#x27;:app:lintClassPath&#x27;. &gt; Could not find com.android.tools.lint:lint-gradle:26.1.2. Searched in the following locations: file:/C:/Users/wwq/AppData/Local/Android/sdk/extras/m2repository/com/android/tools/lint/lint-gradle/26.1.2/lint-gradle-26.1.2.pom file:/C:/Users/wwq/AppData/Local/Android/sdk/extras/m2repository/com/android/tools/lint/lint-gradle/26.1.2/lint-gradle-26.1.2.jar file:/C:/Users/wwq/AppData/Local/Android/sdk/extras/google/m2repository/com/android/tools/lint/lint-gradle/26.1.2/lint-gradle-26.1.2.pom file:/C:/Users/wwq/AppData/Local/Android/sdk/extras/google/m2repository/com/android/tools/lint/lint-gradle/26.1.2/lint-gradle-26.1.2.jar file:/C:/Users/wwq/AppData/Local/Android/sdk/extras/android/m2repository/com/android/tools/lint/lint-gradle/26.1.2/lint-gradle-26.1.2.pom file:/C:/Users/wwq/AppData/Local/Android/sdk/extras/android/m2repository/com/android/tools/lint/lint-gradle/26.1.2/lint-gradle-26.1.2.jar https://jcenter.bintray.com/com/android/tools/lint/lint-gradle/26.1.2/lint-gradle-26.1.2.pom https://jcenter.bintray.com/com/android/tools/lint/lint-gradle/26.1.2/lint-gradle-26.1.2.jar Required by: project :app 解决方法： 检查根 build.gradle 文件。 1allprojects &#123; repositories &#123; jcenter() // mavenCentral() google() //**要加这行** // maven &#123; url &#x27;https://jitpack.io&#x27; &#125; &#125; &#125;","categories":[],"tags":[{"name":"android","slug":"android","permalink":"https://wanqiang.wang/tags/android/"}]},{"title":"Java中的移位操作符","slug":"Java中的移位操作符","date":"2018-04-29T03:09:22.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/3537.html","permalink":"https://wanqiang.wang/post/3537.html","excerpt":"","text":"java中有三种移位运算符 &lt;&lt; : 左移运算符，num &lt;&lt; 1,相当于num乘以2 &gt; : 右移运算符，num &gt;&gt; 1,相当于num除以2 &gt; : 无符号右移，忽略符号位，空位都以0补齐 下面是测试代码&#96;public static void main(String[] args) { int number &#x3D; 10; &#x2F;&#x2F;原始数二进制 printInfo(number); number &#x3D; number &lt;&lt; 1; &#x2F;&#x2F;左移一位 printInfo(number); number &#x3D; number &gt;&gt; 1; &#x2F;&#x2F;右移一位 printInfo(number); } /** * 输出一个int的二进制数 * @param num */ private static void printInfo(int num){ System.out.println(Integer.toBinaryString(num)); }` 输出结果： 1010 10100 1010","categories":[],"tags":[]},{"title":"IOS设置固定大小的图片","slug":"IOS设置固定大小的图片","date":"2018-02-17T03:50:54.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/5fbb.html","permalink":"https://wanqiang.wang/post/5fbb.html","excerpt":"","text":"下面是实现这部分功能的代码： 12345678UIImage * img = [UIImage imageNamed:@&quot;doorlogo&quot;];CGSize itemSize = CGSizeMake(60, 60);UIGraphicsBeginImageContext(itemSize);CGRect imageRect = CGRectMake(0, 0, itemSize.width, itemSize.height);[img drawInRect:imageRect];cell.imageView.image = UIGraphicsGetImageFromCurrentImageContext();UIGraphicsEndImageContext();","categories":[],"tags":[],"author":"Wanqiang"},{"title":"UIAlertController 项添加图标","slug":"UIAlertController 项添加图标","date":"2018-01-20T06:41:06.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/389c.html","permalink":"https://wanqiang.wang/post/389c.html","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839(void)savePreset &#123; UIAlertController * alertController = [UIAlertController alertControllerWithTitle:@&quot;Preset to Remoter buttons&quot; message:nil preferredStyle:UIAlertControllerStyleActionSheet]; UIAlertAction * preset1 = [UIAlertAction actionWithTitle:@&quot;Preset1&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123; NSLog(@&quot;send preset 1&quot;); &#125;]; UIAlertAction * preset2 = [UIAlertAction actionWithTitle:@&quot;Preset2&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123; NSLog(@&quot;send preset 2&quot;); &#125;]; UIAlertAction * preset3 = [UIAlertAction actionWithTitle:@&quot;Preset3&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123; NSLog(@&quot;send preset 3&quot;); &#125;]; UIAlertAction * preset4 = [UIAlertAction actionWithTitle:@&quot;Preset4&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123; NSLog(@&quot;send preset 4&quot;); &#125;]; UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@&quot;Cancel&quot; style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) &#123;&#125;]; [alertController addAction:defaultAction]; [preset1 setValue:[[UIImage imageNamed:@&quot;fire&quot;] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] forKey:@&quot;image&quot;]; [preset2 setValue:[[UIImage imageNamed:@&quot;left&quot;] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] forKey:@&quot;image&quot;]; [preset3 setValue:[[UIImage imageNamed:@&quot;right&quot;] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] forKey:@&quot;image&quot;]; [preset4 setValue:[[UIImage imageNamed:@&quot;down&quot;] imageWithRenderingMode:UIImageRenderingModeAutomatic] forKey:@&quot;image&quot;]; [alertController addAction:preset1]; [alertController addAction:preset2]; [alertController addAction:preset3]; [alertController addAction:preset4]; [self presentViewController:alertController animated:YES completion:nil]; &#125;","categories":[],"tags":[]},{"title":"IOS设置固定大小的图片","slug":"IOS设置固定大小的图片_2","date":"2018-01-20T04:21:19.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/5fbb.html","permalink":"https://wanqiang.wang/post/5fbb.html","excerpt":"","text":"&#96;固定图片大小 UIImage * img = [UIImage imageNamed:@&quot;doorlogo&quot;]; CGSize itemSize = CGSizeMake(60, 60); UIGraphicsBeginImageContext(itemSize); CGRect imageRect = CGRectMake(0, 0, itemSize.width, itemSize.height); [img drawInRect:imageRect]; cell.imageView.image = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext();`","categories":[],"tags":[]},{"title":"苹果软件发布问题汇总","slug":"苹果软件发布问题汇总","date":"2017-11-05T10:29:56.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/56c9.html","permalink":"https://wanqiang.wang/post/56c9.html","excerpt":"","text":"苹果软件发布问题汇总上传程序不能在可选列表中显示出来怎么办？检查开发者帐号的邮箱，会把是什么原因导制的通过邮件发过来。比较奇怪是上传过程不会有任何提示，ituneconnect帐号中也不会提示。比较挫。 出现上面的情况，一般都是程序里面的权限设置问题。 发布硬件配合的程序发布程序的时候最好配一个联机演示的视频。不然的话，他后面会让你补上，浪费时间。 xcode打包的地方上传不了遇到过这种情况，这里怎么也传不了，一直正在进行，不完成。可以从xcode的那个菜单里面调出一个独立的工具出来。这个工具一般比较好用。 遇到过 遇小化那个上传界面，然后恢复。就会提示已上传完成。其实根本就没有成功上传，完全是骗人的。","categories":[],"tags":[],"author":"Wanqiang"},{"title":"Hexo 使用相关","slug":"Hexo-使用相关","date":"2017-11-04T11:36:00.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/e0b6.html","permalink":"https://wanqiang.wang/post/e0b6.html","excerpt":"","text":"安装与配置据说每个从wordpress转过来blog都会有篇文章，这个就是。 windows两个前提和条件 首先要安装 Node.js 当然了还要安装 git 然后在Windows命令行输入 安装hexo 1npm install -g hexo 初始化一个blog，这里名字就叫 hexo 1hexo init hexo 进入hexo目录 1cd hexo 安装依赖文件 1npm install 部署形成文件 1hexo generate mac还没有测试过如何弄。 linux还没有测试过如何弄。 发布本地预览1hexo s 就能打开一个本地服务器，通过提示的地址可以看效果。 怎么发布到Github的空间中去首先得有github帐号，肯定有了，不说了。还有就是要在本机配置好如何能push到github上去。github官方有说明，windows还有点复杂，这里暂时不说了。 如何写文章Draft在文件夹的source目录下面有个_drafts目录，这里面都是没有Post。 publish在文件夹的source目录下面有个_post目录。这里面都是已经post了的。 插件要工作，有些插件必须要有。 发布到github上需要一个插件。 把wordpress内容导入到hexo也需要一个插件。 有个hexo admin的插件可以成倍的减少用hexo的难度。（我正在用） 使用心得next主题很不错，要另外安装。默认的比较丑。","categories":[{"name":"tools","slug":"tools","permalink":"https://wanqiang.wang/categories/tools/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://wanqiang.wang/tags/blog/"}],"author":"Wanqiang"},{"title":"ssh 通过证书建立信任关系（转）（备用）","slug":"ssh 通过证书建立信任关系","date":"2017-10-17T06:35:06.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/26b1.html","permalink":"https://wanqiang.wang/post/26b1.html","excerpt":"","text":"建立SSH信任将A主机做为客户端（发起SSH请求 ip:192.168.200.170）将B主机作为服务器端（接收ssh请求 ip:192.168.200.149）以上以主动发起SSH登录请求的主机和接收请求的主机进行分类 A主机生成公，私钥证书12345678910111213[root@buddytj-10 .ssh]# ssh-keygen -t rsa #rsa算法的证书Generating public/private rsa key pair. （以下一路回车）Enter file in which to save the key (/root/.ssh/id_rsa):/root/.ssh/id_rsa already exists.Overwrite (y/n)? y （因为我的证书已存在，覆盖即可）Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa. （私钥）Your public key has been saved in /root/.ssh/id_rsa.pub. （公钥）The key fingerprint is:c1:26:cc:88:2b:05:dd:c3:6b:1e:78:5d:da:9c:da:8a 证书就生成了 id_rsa （私钥）|&amp;amp; id_rsa.pub （公钥） 将A主机生成的公钥传递给B主机123[root@xyh .ssh]#scp id_rsa.pub 192.168.200.149：/root/.ssh/在B主机上将A的公钥更名为[root@xyh .ssh]#mv id_rsa.pub authorized_keys 至此从A主机远程SSH B主机的工作即告完成","categories":[{"name":"未分类","slug":"未分类","permalink":"https://wanqiang.wang/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"IOS widget学习入门","slug":"iOS Widget学习入门","date":"2017-05-02T11:03:47.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/b3a5.html","permalink":"https://wanqiang.wang/post/b3a5.html","excerpt":"","text":"一篇不错的文章，收藏： 这里","categories":[{"name":"IOS","slug":"IOS","permalink":"https://wanqiang.wang/categories/IOS/"}],"tags":[]},{"title":"tmux使用：复制与粘贴","slug":"tmux使用：复制与粘贴","date":"2017-04-30T00:36:06.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/f8e.html","permalink":"https://wanqiang.wang/post/f8e.html","excerpt":"","text":"拷贝与粘贴 tmux不同的配置，快捷键会存在较大的差异。也就是说，可以定义不同的快捷键来实现复制与粘贴。详细的说明可以在 tmux 的手册中找到。但对于其默认的设置中这样的：使用 “ctrl-b [“ 进入拷贝模式，使用空格键（space）开始内容选取，回车键（Enter）进行拷贝，然后使用 “ctrl-b ]” 进行粘贴。 Good luck.","categories":[{"name":"tmux","slug":"tmux","permalink":"https://wanqiang.wang/categories/tmux/"},{"name":"linux","slug":"tmux/linux","permalink":"https://wanqiang.wang/categories/tmux/linux/"}],"tags":[]},{"title":"编写Dockerfile的原则","slug":"编写Dockerfile的原则","date":"2017-04-29T01:48:19.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/e1f9.html","permalink":"https://wanqiang.wang/post/e1f9.html","excerpt":"","text":"一篇文章的总结：原文在这里 1. 使用统一的 base 镜像 有些文章讲优化镜像会提倡使用尽量小的基础镜像，比如 busybox 或者 alpine 等。我更推荐使用统一的大家比较熟悉的基础镜像，比如 ubuntu，centos 等，因为基础镜像只需要下载一次可以共享，并不会造成太多的存储空间浪费。它的好处是这些镜像的生态比较完整，方便我们安装软件，除了问题进行调试。 2. 动静分离 经常变化的内容和基本不会变化的内容要分开，把不怎么变化的内容放在下层，创建出来不同基础镜像供上层使用。比如可以创建各种语言的基础镜像，python2.7、python3.4、go1.7、java7等等，这些镜像包含了最基本的语言库，每个组可以在上面继续构建应用级别的镜像。 3. 最小原则：只安装必需的东西 很多人构建镜像的时候，都有一种冲动——把可能用到的东西都打包到镜像中。要遏制这种想法，镜像中应该只包含必需的东西，任何可以有也可以没有的东西都不要放到里面。因为镜像的扩展很容易，而且运行容器的时候也很方便地对其进行修改。这样可以保证镜像尽可能小，构建的时候尽可能快，也保证未来的更快传输、更省网络资源。 4. 一个原则：每个镜像只有一个功能 不要在容器里运行多个不同功能的进程，每个镜像中只安装一个应用的软件包和文件，需要交互的程序通过 pod（kubernetes 提供的特性） 或者容器之间的网络进行交流。这样可以保证模块化，不同的应用可以分开维护和升级，也能减小单个镜像的大小。 5. 使用更少的层 虽然看起来把不同的命令尽量分开来，写在多个命令中容易阅读和理解。但是这样会导致出现太多的镜像层，而不好管理和分析镜像，而且镜像的层是有限的。尽量把相关的内容放到同一个层，使用换行符进行分割，这样可以进一步减小镜像大小，并且方便查看镜像历史。 6. 减少每层的内容 尽管只安装必须的内容，在这个过程中也可能会产生额外的内容或者临时文件，我们要尽量让每层安装的东西保持最小。 比如使用 –no-install-recommends 参数告诉 apt-get 不要安装推荐的软件包安装完软件包，清楚 &#x2F;var&#x2F;lib&#x2F;apt&#x2F;list&#x2F; 缓存删除中间文件：比如下载的压缩包删除临时文件：如果命令产生了临时文件，也要及时删除7. 不要在 Dockerfile 中修改文件的权限 因为 docker 镜像是分层的，任何修改都会新增一个层，修改文件或者目录权限也是如此。如果修改大文件或者目录的权限，会把这些文件复制一份，这样很容易导致镜像很大。 解决方案也很简单，要么在添加到 Dockerfile 之前就把文件的权限和用户设置好，要么在容器启动脚本（entrypoint）做这些修改。 8. 利用 cache 来加快构建速度 如果 Docker 发现某个层已经存在了，它会直接使用已经存在的层，而不会重新运行一次。如果你连续运行 docker build 多次，会发现第二次运行很快就结束了。 不过从 1.10 版本开始，Content Addressable Storage 的引入导致缓存功能的实效，目前引入了 –cache-from 参数可以手动指定一个镜像来使用它的缓存。 9. 版本控制和自动构建 最好把 Dockerfile 和对应的应用代码一起放到版本控制中，然后能够自动构建镜像。这样的好处是可以追踪各个版本镜像的内容，方便了解不同镜像有什么区别，对于调试和回滚都有好处。 另外，如果运行镜像的参数或者环境变量很多，也要有对应的文档给予说明，并且文档要随着 Dockerfile 变化而更新，这样任何人都能参考着文档很容易地使用镜像，而不是下载了镜像不知道怎么用。","categories":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/categories/docker/"}],"tags":[]},{"title":"tmux配置：用鼠标切换窗口、调节大小","slug":"tmux配置：用鼠标切换窗口、调节大小","date":"2017-04-28T01:16:30.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/198e.html","permalink":"https://wanqiang.wang/post/198e.html","excerpt":"","text":"以下内容来自这里：HERE 其实就这么几行配置: 1234setw -g mouse-resize-pane onsetw -g mouse-select-pane onsetw -g mouse-select-window onsetw -g mode-mouse on 这几行的作用分别是: 1234开启用鼠标拖动调节pane的大小（拖动位置是pane之间的分隔线）开启用鼠标点击pane来激活该pane开启用鼠标点击来切换活动window（点击位置是状态栏的窗口名称）开启window/pane里面的鼠标支持（也即可以用鼠标滚轮回滚显示窗口内容，此时还可以用鼠标选取文本） 这几行配置加到 ~&#x2F;.tmux.conf 中，然后在tmux里面按 C-b : 执行 source ~&#x2F;.tmux.conf 即可生效 （也可以直接将这几行放在 C-b : 的输入行去执行，每次执行一行，不过 tmux重启后还得再来一遍）。","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"}],"tags":[]},{"title":"IOS获取当前时间并转换成可显示字符串的方法","slug":"IOS获取当前时间并转换成可显示字符串的方法","date":"2017-04-26T14:48:54.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/6ba5.html","permalink":"https://wanqiang.wang/post/6ba5.html","excerpt":"","text":"本来很简单的时，在IOS上涉及到的东西还挺多。 1234567891011121314151617181920* (NSString *)getCurrentTimeString &#123;NSDate *today = [NSDate date];// NSInteger interval = [[NSTimeZone systemTimeZone] secondsFromGMTForDate: today];// NSDate *localeDate = [today dateByAddingTimeInterval: interval]; NSDateFormatter _formatter = [[NSDateFormatter alloc] init] ;[formatter setDateStyle:NSDateFormatterMediumStyle];[formatter setTimeStyle:NSDateFormatterShortStyle];[formatter setDateFormat:@&quot;YYYY-MM-dd HH:mm:ss&quot;]; //hh与HH的区别:分别表示12小时制,24小时制//设置时区,这个对于时间的处理有时很重要//NSTimeZone_ timeZone = [NSTimeZone timeZoneWithName:@&quot;Asia/Shanghai&quot;];NSTimeZone* timeZone = [NSTimeZone systemTimeZone]; [formatter setTimeZone:timeZone]; //NSString * date_str = [localeDate description];NSString * date_str = [formatter stringFromDate:today];return date_str;&#125;","categories":[{"name":"IOS","slug":"IOS","permalink":"https://wanqiang.wang/categories/IOS/"}],"tags":[]},{"title":"C++代码之编译器的坑","slug":"cpp代码之编译器的坑","date":"2017-04-22T11:51:12.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/e262.html","permalink":"https://wanqiang.wang/post/e262.html","excerpt":"","text":"C++代码需要在不同的环境里运行，使用的编译器一般来说是不一样的。不一样就会导致对语法的解释不同，一个编译器通过了，但却不能保证在另一个编译器上通过。 今天再次遇到这事，win过了，Linux 却挂了。由于昨天的网络问题没法在Linux 平台上验证。这种时候总是会发生点什么，脸也是够黑的。 一个函数参数需要一个标准库的容器引用，由于一个地方我不需要所以没定义临时变量，直接把容器的构造函数放在参数位置传下去。win 一切正常。Linux却不过。 偶然因素导致不能检查，自动编译Jinkens也没过。影响大家工作。 还是小心的好！","categories":[{"name":"c++","slug":"c","permalink":"https://wanqiang.wang/categories/c/"}],"tags":[]},{"title":"如何自己编译Logsaw","slug":"如何自己编译Logsaw","date":"2017-04-22T01:59:26.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/a903.html","permalink":"https://wanqiang.wang/post/a903.html","excerpt":"","text":"Logsaw是一个非常不错的日志分析工具，自已编译一定要严格按照它的编译教程来做。自己花了一些时间，对eclipse不熟悉。 教程的链接：http://logsaw.sourceforge.net/?page_id=260 重点要关注的：eclipse版本选择：the latest version of Eclipse for RCP and RAP Developers. 下载代码，导入工程一般不会有问题。这里就不说了。下面的要注意： 1. navigate into the releng project, and open the workspace.target file in there. In the Target Definition editor, hit the Set as Target Platform button in the upper right corner. 打开releng工程的workspace.target文件，然后点击这一页上面的链接Set as Target,然后要等一会儿，应该是去网上下载东西去了。 2. right-click on the releng project and choose Run As &gt; Maven build…. In the following dialog, enter the goals clean package and then hit run. Run As会出来几个，一定要找那个可以输入goals的，然后输入clean package然Run就可以了。为毛是clean package啊，好迷惑。 3. 生成的安装在这里：&#x2F;net.sf.logsaw.site.feature&#x2F;target&#x2F;products","categories":[{"name":"日志系统","slug":"日志系统","permalink":"https://wanqiang.wang/categories/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"log","slug":"log","permalink":"https://wanqiang.wang/tags/log/"}]},{"title":"数据库学习之关键字DISTINCT","slug":"数据库学习之关键字DISTINCT","date":"2017-04-20T23:07:25.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/1e1d.html","permalink":"https://wanqiang.wang/post/1e1d.html","excerpt":"","text":"如果一列的值有多个，查询的时间，这些值是会多次返回的。如果不在乎次数，只在有没有。也就是出现过了就不要再出现了，要实现这样的查询就要用到DISTINCT关键字。 其用法如下： 1SELECT **DISTINCT** vend_ id FROM Products; [美]Ben Forta. SQL必知必会（第4版） (图灵程序设计丛书 80) (Kindle Location 325). 人民邮电出版社. Kindle Edition.","categories":[{"name":"数据库","slug":"数据库","permalink":"https://wanqiang.wang/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"database","slug":"database","permalink":"https://wanqiang.wang/tags/database/"}]},{"title":"PHP利用PHPExcel操作Excel文件","slug":"PHP使用PHPExcel操作Excel文件","date":"2017-04-20T00:53:13.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/7640.html","permalink":"https://wanqiang.wang/post/7640.html","excerpt":"","text":"工具：PHPExcel 下面是示例代码，备用。 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** Error reporting */error_reporting(E_ALL);/** Include path **/ini_set(&#x27;include_path&#x27;, ini_get(&#x27;include_path&#x27;).&#x27;;../Classes/&#x27;);/** PHPExcel */include &#x27;PHPExcel.php&#x27;;/** PHPExcel_Writer_Excel2007 */include &#x27;PHPExcel/Writer/Excel2007.php&#x27;;// Create new PHPExcel objectecho date(&#x27;H:i:s&#x27;) . &quot; Create new PHPExcel object\\n&quot;;$objPHPExcel = new PHPExcel();// Set propertiesecho date(&#x27;H:i:s&#x27;) . &quot; Set properties\\n&quot;;$objPHPExcel-&gt;getProperties()-&gt;setCreator(&quot;Maarten Balliauw&quot;);$objPHPExcel-&gt;getProperties()-&gt;setLastModifiedBy(&quot;Maarten Balliauw&quot;);$objPHPExcel-&gt;getProperties()-&gt;setTitle(&quot;Office 2007 XLSX Test Document&quot;);$objPHPExcel-&gt;getProperties()-&gt;setSubject(&quot;Office 2007 XLSX Test Document&quot;);$objPHPExcel-&gt;getProperties()-&gt;setDescription(&quot;Test document for Office 2007 XLSX, generated using PHP classes.&quot;);// Add some dataecho date(&#x27;H:i:s&#x27;) . &quot; Add some data\\n&quot;;$objPHPExcel-&gt;setActiveSheetIndex(0);$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue(&#x27;A1&#x27;, &#x27;Hello&#x27;);$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue(&#x27;B2&#x27;, &#x27;world!&#x27;);$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue(&#x27;C1&#x27;, &#x27;Hello&#x27;);$objPHPExcel-&gt;getActiveSheet()-&gt;SetCellValue(&#x27;D2&#x27;, &#x27;world!&#x27;);// Rename sheetecho date(&#x27;H:i:s&#x27;) . &quot; Rename sheet\\n&quot;;$objPHPExcel-&gt;getActiveSheet()-&gt;setTitle(&#x27;Simple&#x27;);// Save Excel 2007 fileecho date(&#x27;H:i:s&#x27;) . &quot; Write to Excel2007 format\\n&quot;;$objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);$objWriter-&gt;save(str_replace(&#x27;.php&#x27;, &#x27;.xlsx&#x27;, **FILE**));// Echo doneecho date(&#x27;H:i:s&#x27;) . &quot; Done writing file.\\r\\n&quot;;","categories":[{"name":"PHP","slug":"PHP","permalink":"https://wanqiang.wang/categories/PHP/"},{"name":"好文收藏","slug":"PHP/好文收藏","permalink":"https://wanqiang.wang/categories/PHP/%E5%A5%BD%E6%96%87%E6%94%B6%E8%97%8F/"}],"tags":[]},{"title":"IOS客户端代码复用方案","slug":"IOS客户端代码复用方案","date":"2017-04-19T01:18:24.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/15ff.html","permalink":"https://wanqiang.wang/post/15ff.html","excerpt":"","text":"不错一遍文章，收藏。 http://shellhue.github.io/2017/04/08/sharecode/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io","categories":[{"name":"好文收藏","slug":"好文收藏","permalink":"https://wanqiang.wang/categories/%E5%A5%BD%E6%96%87%E6%94%B6%E8%97%8F/"}],"tags":[]},{"title":"用阿里云解决Jcenter下载太慢的问题。","slug":"用阿里云解决Jcenter下载太慢的问题","date":"2017-04-17T14:20:56.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/9a9c.html","permalink":"https://wanqiang.wang/post/9a9c.html","excerpt":"","text":"亲测速度，极好。 使用阿里云的国内镜像仓库地址，修改项目根目录下的文件 build.gradle ： &#96;buildscript { repositories { maven{ url ‘http://maven.aliyun.com/nexus/content/groups/public/&#39;} }} allprojects { repositories { maven{ url ‘http://maven.aliyun.com/nexus/content/groups/public/&#39;} }}&#96; 然后选择重新构建项目就可以了","categories":[{"name":"iOS","slug":"iOS","permalink":"https://wanqiang.wang/categories/iOS/"}],"tags":[]},{"title":"如何进入正在运行的Docker容器","slug":"如何进入正在运行的Docker容器","date":"2017-04-14T11:10:02.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/7007.html","permalink":"https://wanqiang.wang/post/7007.html","excerpt":"","text":"网上有很多种方式，比如ssh什么的。但下面这种方法我认为应该是最好，最方便的。 &#96;$ sudo docker ps$ sudo docker exec -it 775c7c9ee1e1 &#x2F;bin&#x2F;bash &#96; 其中775c7c9ee1e1是容器的运行时id。","categories":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/categories/docker/"},{"name":"未分类","slug":"docker/未分类","permalink":"https://wanqiang.wang/categories/docker/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"docker 下载加速","slug":"docker-下载加速","date":"2017-04-12T13:54:26.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/3370.html","permalink":"https://wanqiang.wang/post/3370.html","excerpt":"","text":"直接下载官方的docker镜像，慢得很。 下面这个地址可以加速： https://www.daocloud.io/mirror#accelerator-doc","categories":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/categories/docker/"}],"tags":[]},{"title":"bitnami安装的程序如何去掉欢迎页面。","slug":"bitnami安装的程序如何去掉欢迎页面","date":"2016-10-19T11:31:48.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/9c7f.html","permalink":"https://wanqiang.wang/post/9c7f.html","excerpt":"","text":"就是网址打开的那个页面。去掉它直接进入安装的程序。 方法如下： 在开始菜单找到安装程序的命令行的窗口。执行。 cd 命令进入到 apps 目录下面的程序的目录下：比如我这个：D:\\Bitnami\\redmine-3.3.1-0\\apps\\redmine&gt; 执行这个目录下面的 bnconfig.exe 程序，参数像这样： bnconfig.exe –appurl &#x2F; 然后再到开始菜单中去重启整个服务。 我用的是Windows版，别的应该也是一样的。","categories":[{"name":"IT","slug":"IT","permalink":"https://wanqiang.wang/categories/IT/"},{"name":"win 10","slug":"IT/win-10","permalink":"https://wanqiang.wang/categories/IT/win-10/"}],"tags":[{"name":"bitnami","slug":"bitnami","permalink":"https://wanqiang.wang/tags/bitnami/"},{"name":"redmine","slug":"redmine","permalink":"https://wanqiang.wang/tags/redmine/"}]},{"title":"win10 打不开samba文件夹的解决方法","slug":"win10 打不开samba文件夹的解决方法","date":"2016-10-02T01:37:30.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/4a9e.html","permalink":"https://wanqiang.wang/post/4a9e.html","excerpt":"","text":"Win10 打不开局域网电脑共享的文件夹。 在网上搜了一下，说关掉Pin的，也有说不要用微软帐户的。我试了一下，只关掉PIN是不行的，但不能用指纹登陆了。关掉微软帐户，启用本地帐户，重启就可以。 也有说关掉自动同步，可以用微软帐户的，试了下，应该是不行的。 难道要访问局域网中的资源，只能用本地帐户？ 我想微软应该不会这么傻X吧。肯定是哪里没有设置好。 把设置找了一遍，果然找到了： Control Panel\\Network and Internet\\Network and Sharing Centre\\Advanced sharing settings 下面的 File and Printer share 默认是关闭的。打开以后就可以了。 这个应该才是正确的解锁姿势，默认是关闭的，默认是关闭的，默认是关闭的。晕倒。","categories":[{"name":"win10","slug":"win10","permalink":"https://wanqiang.wang/categories/win10/"}],"tags":[]},{"title":"log4cplus 使用问题总结","slug":"log4cplus 使用问题总结","date":"2016-08-16T00:58:21.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/217f.html","permalink":"https://wanqiang.wang/post/217f.html","excerpt":"","text":"一个问题浪费两次时间，真是一个悲伤的故事。 问题出在对于按时间归档的 Appender 的理解失误上，在网上找啊找啊，都是千篇一律的抄来抄去，完全不符合要求。明明记得在不久以前处理过这个问题，但却就忘了提交了呢。宝宝心里苦啊。 我这里要求是按时间生成文件名，也就是文件名是按当时的时间去确定的。当是库上的版本却用了 DailyRollingFileAppender 这个。这个的在确的意思是，多长时是一归档，当然归档会有一个文件名的规则。而这里的问题正确应该用：TimeBasedRollingFileAppender 下面是一个例子： 123456789log4cplus.appender.OTS_H=log4cplus::TimeBasedRollingFileAppenderlog4cplus.appender.OTS_H.MaxHistory=10log4cplus.appender.OTS_H.FilenamePattern=%d&#123;yyyy-MM-dd-HH-mm&#125;_OTS.csvlog4cplus.appender.OTS_H.layout=log4cplus::PatternLayoutlog4cplus.appender.OTS_H.layout.ConversionPattern=%m%nlog4cplus.appender.OTS_H.RollOnClose=falselog4cplus.appender.OTS_H.Schedule=DAILYlog4cplus.appender.OTS_H.CreateDirs=true","categories":[{"name":"未分类","slug":"未分类","permalink":"https://wanqiang.wang/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"Qt Creator选择 run in terminal后不能启动程序的问题","slug":"Qt Creator选择 run in terminal后不能启动程序的问题","date":"2016-06-16T05:48:59.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/604c.html","permalink":"https://wanqiang.wang/post/604c.html","excerpt":"","text":"升级4.X以后，出现这个问题，一直卡在加载程序的地方，取消掉这个选项就没有问题。解决的方法是：不要使用默认的终端程序，使用 xterm Under Tools-Options-Environment-General, change the terminal value from x-terminal-emulator -e to &#x2F;usr&#x2F;bin&#x2F;xterm -e.","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"}],"tags":[]},{"title":"Linux 解压、压缩汇总","slug":"Linux 解压、压缩汇总","date":"2016-05-02T07:28:07.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/8e20.html","permalink":"https://wanqiang.wang/post/8e20.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162tar-c: 建立压缩档案-x：解压-t：查看内容-r：向压缩归档文件末尾追加文件-u：更新原压缩包中的文件这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。-z：有gzip属性的-j：有bz2属性的-Z：有compress属性的-v：显示所有过程-O：将文件解开到标准输出下面的参数-f是必须的-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。# tar -cf all.tar *.jpg这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。# tar -rf all.tar *.gif这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。# tar -uf all.tar logo.gif这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。# tar -tf all.tar这条命令是列出all.tar包中所有文件，-t是列出文件的意思# tar -xf all.tar这条命令是解出all.tar包中所有文件，-x是解开的意思压缩tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpgtar –czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gztar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2tar –cZf jpg.tar.Z *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Zrar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linuxzip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux解压tar –xvf file.tar //解压 tar包tar -xzvf file.tar.gz //解压tar.gztar -xjvf file.tar.bz2 //解压 tar.bz2tar –xZvf file.tar.Z //解压tar.Zunrar e file.rar //解压rarunzip file.zip //解压zip总结1、*.tar 用 tar –xvf 解压2、*.gz 用 gzip -d或者gunzip 解压3、*.tar.gz和*.tgz 用 tar –xzf 解压4、*.bz2 用 bzip2 -d或者用bunzip2 解压5、*.tar.bz2用tar –xjf 解压6、*.Z 用 uncompress 解压7、*.tar.Z 用tar –xZf 解压8、*.rar 用 unrar e解压9、*.zip 用 unzip 解压","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"},{"name":"tar","slug":"linux/tar","permalink":"https://wanqiang.wang/categories/linux/tar/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/tags/linux/"},{"name":"tar","slug":"tar","permalink":"https://wanqiang.wang/tags/tar/"}]},{"title":"Linux软raid恢复后md127问题","slug":"Linux软raid恢复后md127问题","date":"2016-05-02T07:28:07.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/4bd9.html","permalink":"https://wanqiang.wang/post/4bd9.html","excerpt":"","text":"检查&#x2F;etc&#x2F;mdadm&#x2F;mdadm.conf，内容是对的，但重启后，还是md127. 在网上看到这个： 查看md0的UUID：sudo mdadm –detail &#x2F;dev&#x2F;md0拷贝下来UUID 7f59975e:9e637932:dce17021:f68cb000然后：sudo vim &#x2F;etc&#x2F;mdadm&#x2F;mdadm.conf在文件的靠前位置，加入这一行：ARRAY &#x2F;dev&#x2F;md0 UUID&#x3D;7f59975e:9e637932:dce17021:f68cb000:wq!强制保存后退出vim，下一步很重要！You need to update initramfs so it contains your mdadm.conf settings during boot.sudo update-initramfs -u否则，重启系统，mdadm会自动将raid1生成&#x2F;dev&#x2F;md127，而不是&#x2F;dev&#x2F;md0。 update-initramfs 后，确实管用。","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"},{"name":"MicroGen8","slug":"linux/MicroGen8","permalink":"https://wanqiang.wang/categories/linux/MicroGen8/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/tags/linux/"},{"name":"MicroGen8","slug":"MicroGen8","permalink":"https://wanqiang.wang/tags/MicroGen8/"}]},{"title":"Micro Gen8 sata5 启动 Linux","slug":"Micro Gen8 sata5 启动 Linux","date":"2016-05-02T02:47:07.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/7d41.html","permalink":"https://wanqiang.wang/post/7d41.html","excerpt":"","text":"经过5+小时的尝试，终于找到了方法。参考了这个文章：http://www.newsmth.net/nForum/#!article/DigiHome/419729 找一张TF卡，我的是2G的。 启动盘准备的时候，我能进到Linux中，但是用grub-install死活也装不好，浪费了好多时间，各种参数。最后没有办法，使用了这个文章准备的grub镜像，直接用win32diskImager写的启动盘。 但这个启动盘能进grub，但不能启动我的系统，我和文章的不一样的，我的sata5位置是我安装好的xunbuntu。 去掉所有的盘，只留一个sata5的系统盘，进入系统。在安装好的系统盘中，找到&#x2F;boot&#x2F;grub&#x2F;grub.cfg，复制这个文件替换掉Tf卡里的这个文件。 重新开机吧，setup里面选择U盘启动。再插其它的硬盘，总会是从sata5启动的。","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"},{"name":"MicroGen8","slug":"linux/MicroGen8","permalink":"https://wanqiang.wang/categories/linux/MicroGen8/"}],"tags":[]},{"title":"Mac 外接显示器颜色问题","slug":"Mac外接显示器颜色问题","date":"2016-03-31T14:01:41.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/4a85.html","permalink":"https://wanqiang.wang/post/4a85.html","excerpt":"","text":"自己的mac屏幕太小，外接了一个显示器，发现颜色偏白，有点晃眼，调来调去搞不好。网上的方法也是各种方法。 其实Apple自己的显示器设置里面就能搞好。 系统偏好设置-》显示器-》颜色-》校准 然后看着效果一步一步来，就能调整到自己满意的效果。","categories":[{"name":"Mac 使用","slug":"Mac-使用","permalink":"https://wanqiang.wang/categories/Mac-%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"重启minidlna","slug":"重启minidlna","date":"2016-03-21T06:52:34.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/1252.html","permalink":"https://wanqiang.wang/post/1252.html","excerpt":"","text":"服务器文件大调整，盒子上看文件发现需多不对了，重启一下就好了：用下面的命令： sudo /etc/init.d/minidlna force-reload","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"}],"tags":[]},{"title":"xcode 根据不同的编译目标加载不同的库","slug":"xcode 根据不同的编译目标加载不同的库","date":"2016-03-10T14:05:27.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/f178.html","permalink":"https://wanqiang.wang/post/f178.html","excerpt":"","text":"在xcode上开发IOS程序，可以将一个项目编译模拟器和真机，对应着又分别有debug和Release, 相应的别人提供的库也可能按这样给的，代码中要怎么加载呢？ xcode中可以直接配置： 打开工程配置文件，选择 “TARGETS”,找到“Build Settings”选项卡，然后找到“Search Paths”，设置“Library Search Paths”。根据不同的平台选择相应的库的路径就可以了。","categories":[{"name":"IOS 开发","slug":"IOS-开发","permalink":"https://wanqiang.wang/categories/IOS-%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"gem 安装 json 报错","slug":"gem 安装 json 报错","date":"2016-03-08T13:06:43.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/7056.html","permalink":"https://wanqiang.wang/post/7056.html","excerpt":"","text":"问题编译一个开源书辑时，运行 bundle install 命令报错，让安装 json -v ‘1.8.1’，但报错。 sudo gem install json -v &#39;1.8.1&#39; Building native extensions. This could take a while... ERROR: Error installing json: ERROR: Failed to build gem native extension. /usr/bin/ruby1.9.1 extconf.rb /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require&#39;: cannot load such file -- mkmf (LoadError) from /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require&#39; from extconf.rb:1:in `&amp;lt;main&amp;gt;&#39; Gem files will remain installed in /var/lib/gems/1.9.1/gems/json-1.8.1 for inspection. Results logged to /var/lib/gems/1.9.1/gems/json-1.8.1/ext/json/ext/generator/gem_make.out `&lt;/pre&gt; ## 解决 添加 ruby1.9.1-dev包就可以解决这个问题了。 &lt;pre&gt;`sudo apt-get install ruby1.9.1-","categories":[{"name":"gem","slug":"gem","permalink":"https://wanqiang.wang/categories/gem/"}],"tags":[]},{"title":"Git基本使用（1）","slug":"Git基本使用","date":"2016-03-08T00:27:10.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/d007.html","permalink":"https://wanqiang.wang/post/d007.html","excerpt":"","text":"Git 基础使用结合这两天的基本使用情况，进行总结： 创建分支$ git checkout -b dev # 创建并切换 `&lt;/pre&gt; 这样就创建了一个名字叫着 dev 的分支。 注意到这里的 checkout 命令名，他和切换分支是一个命令，只不带了一个 b 参数。 ## 切换分支 &lt;pre&gt;`$ git checkout dev # 切换 `&lt;/pre&gt; 不带参数，这就是切换到了dev分支。 ## 合并分支 &lt;pre&gt;`$ git merge dev # 从dev分支合并 `&lt;/pre&gt; 把dev分支的修改合并到当前的分支 ## 查看分支 &lt;pre&gt;`$ git branch `&lt;/pre&gt; 如果你安装了 oh-my-zsh的git支持的话，查看分支其实很少用，补全太强大了，在需要查看分支的地方，可以临时补全显示出来，选择需要操作。 ## 版本回退 回退版本 `$ git reset --hard HEAD^ #回滚上一个版本 $ git reset --hard HEAD^^ #回滚上上一个版本 $ git reset --hard HEAD~100 #回滚上100个版本 ` 这里和SVN的更新到某个版本不一样，svn这时你去看log,自己确实处理中间的某一个版本，而在Git上，此时 Git log，最上面的版本就是回退后的版本。 撤消版本回退回到未来的版本可以用下面的命令： `$ git reset --hard 3628164 后面的数字是Git的版本号，可以使用 git log, git reflog 去找这个版本号，也可以从 gitlab, github这样的服务器上去取，当然你要是从这些服务器上 clone 过来。","categories":[{"name":"git","slug":"git","permalink":"https://wanqiang.wang/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://wanqiang.wang/tags/git/"}]},{"title":"mac下登陆ssh报错解决","slug":"mac下登陆ssh报错解决","date":"2016-03-06T01:05:00.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/e48.html","permalink":"https://wanqiang.wang/post/e48.html","excerpt":"","text":"mac登陆服务器，不能成功，报下面的错误： Could not resolve hostname xxxxx.com:9527: nodename nor servname provided, or not known 但是如果在局域网内有没有问题，检查了下自己的输入的命令： ssh xxx@xxxxx.com:9527 会出现问题，如果是这样，就可以： ssh xxx@192.168.1.5 就可以 ### 怎么处理呢？ 能过查找发现，要解决这个问题，命令换个写法就可以了： ssh -p 22221 xxx@xxxxx.com 就可以了。 但又是什么原因呢？个人猜测，应该是，mac的ssh程序解析域名的时候，识别不出后面的端口，有bug，同样的做法，用别的ssh客户端就可以了。","categories":[{"name":"Mac 使用","slug":"Mac-使用","permalink":"https://wanqiang.wang/categories/Mac-%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"Git: 利用Git的subtree功能在不同工程共享代码","slug":"利用Git的subtree功能在不同工程共享代码","date":"2016-03-05T02:26:27.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/278d.html","permalink":"https://wanqiang.wang/post/278d.html","excerpt":"","text":"1. 第一次添加子目录，建立与git项目的关联建立关联总共有2条命令。 语法： git remote add -f &lt;子仓库名&gt; &lt;子仓库地址&gt; 解释：其中-f意思是在添加远程仓库之后，立即执行fetch。 语法： git subtree add –prefix&#x3D;&lt;子目录名&gt; &lt;子仓库名&gt; &lt;分支&gt; –squash 解释：–squash意思是把subtree的改动合并成一次commit，这样就不用拉取子项目完整的历史记录。–prefix之后的&#x3D;等号也可以用空格。 示例 $git remote add -f ai https://github.com/aoxu/ai.git $git subtree add --prefix=ai ai master --squash `&lt;/pre&gt; ## 2\\. 从远程仓库更新子目录 更新子目录有2条命令。 语法： git fetch &amp;lt;远程仓库名&gt; &amp;lt;分支&gt; 语法： git subtree pull --prefix=&amp;lt;子目录名&gt; &amp;lt;远程分支&gt; &amp;lt;分支&gt; --squash 示例 &lt;pre&gt;`$git fetch ai master $git subtree pull --prefix=ai ai --squash `&lt;/pre&gt; ## 3\\. 从子目录push到远程仓库（确认你有写权限） 推送子目录的变更有1条命令。 语法： git subtree push --prefix=&amp;lt;子目录名&gt; &amp;lt;远程分支名&gt; 分支 示例 &lt;pre&gt;`$git subtree push --prefix=ai ai master","categories":[{"name":"git","slug":"git","permalink":"https://wanqiang.wang/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://wanqiang.wang/tags/git/"}]},{"title":"gem 设置代理","slug":"gem 设置代理","date":"2016-03-04T02:35:39.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/2809.html","permalink":"https://wanqiang.wang/post/2809.html","excerpt":"","text":"按下面的方法可行 sudo gem install gollum -p http://10.160.8.97:808","categories":[{"name":"gem","slug":"gem","permalink":"https://wanqiang.wang/categories/gem/"}],"tags":[]},{"title":"docker安装Gitlab","slug":"docker安装Gitlab","date":"2016-03-03T02:27:03.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/b7a3.html","permalink":"https://wanqiang.wang/post/b7a3.html","excerpt":"","text":"这里用到了一个第三方的镜像： Step 1. Launch a postgresql container docker run --name gitlab-postgresql -d \\ --env &#39;DB_NAME=gitlabhq_production&#39; \\ --env &#39;DB_USER=gitlab&#39; --env &#39;DB_PASS=password&#39; \\ --volume /srv/docker/gitlab/postgresql:/var/lib/postgresql \\ sameersbn/postgresql:9.4-13 `&lt;/pre&gt; Step 2\\. Launch a redis container &lt;pre&gt;`docker run --name gitlab-redis -d \\ --volume /srv/docker/gitlab/redis:/var/lib/redis \\ sameersbn/redis:latest `&lt;/pre&gt; Step 3\\. Launch the gitlab container &lt;pre&gt;`docker run --name gitlab -d \\ --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \\ --publish 10022:22 --publish 10080:80 \\ --env &#39;GITLAB_PORT=10080&#39; --env &#39;GITLAB_SSH_PORT=10022&#39; \\ --env &#39;GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string&#39; \\ --volume /srv/docker/gitlab/gitlab:/home/git/data \\ sameersbn/gitlab:8.5.1 Please refer to Available Configuration Parameters to understand GITLAB_PORT and other configuration options NOTE: Please allow a couple of minutes for the GitLab application to start. Point your browser to http://localhost:10080 and login using the default username and password: username: root password: 5iveL!fe","categories":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/tags/docker/"},{"name":"github","slug":"github","permalink":"https://wanqiang.wang/tags/github/"}]},{"title":"Linux 下挂Windows的共享目录","slug":"Linux 下挂Windows的共享目录","date":"2016-03-02T09:41:12.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/ee8a.html","permalink":"https://wanqiang.wang/post/ee8a.html","excerpt":"","text":"mount -t cifs -o username&#x3D;windowsusername &#x2F;&#x2F;windows machine&#x2F;sharefiles &#x2F;mnt&#x2F;localfolder 如： 1sudo mount -t cifs -o username=wwq,password=xxxxxx //10.2.37.56/Users/wwq/Desktop/work /mnt/share 其中： 123windowsusername : Windows用户名windows machine ：Windows机器名sharefiles ：Windows共享文件夹名 然后就可以在 &#x2F;mnt&#x2F;localfolder 下访问Windows内容。 注意要先创建目录，这里是 &#x2F;mnt&#x2F;share","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/tags/linux/"}]},{"title":"docker设置代理","slug":"docker设置代理","date":"2016-03-02T08:18:41.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/f709.html","permalink":"https://wanqiang.wang/post/f709.html","excerpt":"","text":"使用下面的命令就可以设置，替换你的IP和端口。sudo HTTP_PROXY&#x3D;10.160.8.99:808 docker -d&amp;","categories":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/tags/docker/"},{"name":"代理","slug":"代理","permalink":"https://wanqiang.wang/tags/%E4%BB%A3%E7%90%86/"}]},{"title":"IOS开发：生成时间字符串","slug":"IOS开发：生成时间字符串","date":"2016-03-01T12:55:48.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/2a08.html","permalink":"https://wanqiang.wang/post/2a08.html","excerpt":"","text":"&#x2F;&#x2F;时间标记字符串生成 -(NSString*)TimeStamp { NSDate *today &#x3D; [NSDate date]; NSDateFormatter *dateFormatter &#x3D; [[NSDateFormatter alloc]init]; [dateFormatter setDateFormat:@”yyyy-MM-dd hh:mm:ss”]; NSString *strDate &#x3D; [dateFormatter stringFromDate:today]; NSLog(@”Time: %@”,strDate); return strDate; }","categories":[{"name":"IOS 开发","slug":"IOS-开发","permalink":"https://wanqiang.wang/categories/IOS-%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"IOS开发：生成时间字符串","slug":"iOS生成时间字符串","date":"2016-03-01T12:55:48.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/2a08.html","permalink":"https://wanqiang.wang/post/2a08.html","excerpt":"","text":"&#x2F;&#x2F;时间标记字符串生成 -(NSString*)TimeStamp { NSDate *today &#x3D; [NSDate date]; NSDateFormatter *dateFormatter &#x3D; [[NSDateFormatter alloc]init]; [dateFormatter setDateFormat:@”yyyy-MM-dd hh:mm:ss”]; NSString *strDate &#x3D; [dateFormatter stringFromDate:today]; NSLog(@”Time: %@”,strDate); return strDate; }","categories":[{"name":"IOS 开发","slug":"IOS-开发","permalink":"https://wanqiang.wang/categories/IOS-%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"ios","slug":"ios","permalink":"https://wanqiang.wang/tags/ios/"}]},{"title":"IOS开发：获取屏幕大小的宏","slug":"IOS开发：获取屏幕大小的宏","date":"2016-03-01T12:50:23.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/b1ab.html","permalink":"https://wanqiang.wang/post/b1ab.html","excerpt":"","text":"&#x2F;&#x2F;获取设备屏幕尺寸 #define SCREEN_WIDTH ([UIScreen mainScreen].bounds.size.width) #define SCREEN_HEIGHT ([UIScreen mainScreen].bounds.size.height)&#x2F;&#x2F;应用尺寸 #define APP_WIDTH [[UIScreen mainScreen]applicationFrame].size.width #define APP_HEIGHT [[UIScreen mainScreen]applicationFrame].size.height","categories":[{"name":"IOS 开发","slug":"IOS-开发","permalink":"https://wanqiang.wang/categories/IOS-%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"解决Docker的两个问题","slug":"解决Docker的两个问题","date":"2016-02-28T01:01:19.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/3c14.html","permalink":"https://wanqiang.wang/post/3c14.html","excerpt":"","text":"解决运行docker 命令一直要用sudo的问题 添加docker用户组$ sudo groupadd docker 把自己加到docker用户组中$ sudo gpasswd -a myusername docker 重启docker后台服务$ sudo service docker restart 注销，然后再登陆$ exit 删除所有运行的docker容器 $ docker rm $(docker ps -a -q)","categories":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/tags/docker/"}]},{"title":"ubuntu 启动默认进入命令行的修改方法","slug":"ubuntu 启动默认进入命令行的修改方法","date":"2015-09-02T14:10:16.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/e88e.html","permalink":"https://wanqiang.wang/post/e88e.html","excerpt":"","text":"首先，编辑sudo vi &#x2F;etc&#x2F;default&#x2F;grub 文件，找到如下行: GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet splash” 将其注释掉（待恢复时可用） #GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”quiet splash” 然后，添加以下内容 GRUB_CMDLINE_LINUX_DEFAULT&#x3D;”text” 保存文件并退出 最后，使用 sudo update-grub 命令，使配置生效 reboot 启动系统即可。","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://wanqiang.wang/tags/ubuntu/"}]},{"title":"linux 软件 raid 1 同步慢的问题","slug":"linux-e8-bd-af-e4-bb-b6-raid-1-e5-90-8c-e6-ad-a5-e6-85-a2-e7-9a-84-e9-97-ae-e9-a2-98","date":"2015-08-30T05:38:28.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/efc9.html","permalink":"https://wanqiang.wang/post/efc9.html","excerpt":"","text":"原因其实很简单，不要先急着将盘挂载上去，同步的过程先卸载掉。速度会成百倍的提升，同步完了再monut回来吧。","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"}],"tags":[]},{"title":"linux 安装 docker","slug":"Linux安装Docker","date":"2015-08-01T10:50:29.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/ebb4.html","permalink":"https://wanqiang.wang/post/ebb4.html","excerpt":"","text":"sudo apt-get install docker 不行啊，怎么回事？ 网上查了下，正常应该是这样的： sudo apt-get install docker.io 了个去！！","categories":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/categories/docker/"},{"name":"linux","slug":"docker/linux","permalink":"https://wanqiang.wang/categories/docker/linux/"}],"tags":[]},{"title":"linux 服务器远程下载","slug":"linux 服务器远程下载","date":"2015-08-01T10:46:00.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/ac9b.html","permalink":"https://wanqiang.wang/post/ac9b.html","excerpt":"","text":"安装 aria2 sudo apt-get install aria2 这样装好了以后，就可以用 ssh 使用 aria2c 了。 但这样有个问题，下载比较花时间，ssh退出，服务就断开了，怎么解决呢？ 安装 screen sudo apt-get install screen 运行时，ssh 后，先 screen ，再在 screen 中 下载，这样就不用怕关 ssh 了。 用 ssh 总是有点不好吧？我不喜欢怎么办？ 有个web gui 可以选择。先在服务器上把 aria2 服务跑起来。 aria2c –enable-rpc –rpc-listen-all&#x3D;true –rpc-allow-origin-all -c 执行上面的这个就可以了。 下面打开网站：http://aria2c.com/ 这个界面的右上有个搬手，点入那个界面，配置好里面的ip，改成服务器ip, 保存。 现在就可以以后在这个网址上，添加下载任务了，当然文件是下载到你的服务器上的。","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"}],"tags":[]},{"title":"linux 命令之：halt 不掉电","slug":"linux 命令之：halt 不掉电","date":"2015-07-28T12:12:14.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/2ee1.html","permalink":"https://wanqiang.wang/post/2ee1.html","excerpt":"","text":"用halt 关机，每次都不断电，后面只能强关。 查了一下 man 手册，发现加个参数就可以了。 sudo halt -p 电源终于一起关了。 shutdown 与 halt 的区别shutdown实际上是调用init 0, init 0会cleanup一些工作然后调用halt或者poweroff。其实主要区别是halt和poweroff，做没有acpi的系统上，halt只是关闭了os，电源还在工作，你得手动取按一下那个按钮，而poweroff会发送一个关闭电源的信号给acpi。 本人HP服务器中自动关机的配置1234567891011121314151617# /etc/crontab: system-wide crontab# Unlike any other crontab you don&#x27;t have to run the `crontab&#x27;# command to install the new version when you edit this file# and files in /etc/cron.d. These files also have username fields,# that none of the other crontabs do.SHELL=/bin/shPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin# m h dom mon dow user command17 * * * * root cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6 * * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6 1 * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )55 23 * * * root /sbin/shutdown -h now15 18 * * * wwq /home/wwq/raid/video/qnas_homes_bakup/rsync_from_qnas_homes.sh &gt; ~/rsync_from_qnas_homes.log","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"}],"tags":[]},{"title":"linux  ssh执行命令断开ssh，命令不退出的方法","slug":"linux_ssh执行命令断开ssh_命令不退出的方法","date":"2015-07-19T06:16:08.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/5dbf.html","permalink":"https://wanqiang.wang/post/5dbf.html","excerpt":"","text":"在树莓派上用ssh的 sox 命令行播放音乐，但是，退出ssh后，随着会话的关闭，播放也就停止了。在网上查找了下解决方法： 经测试，都是可以用的。 1. nohup 用法：nohup play *.mp3 这样就可以了。 2. screen 这个在我的树莓派上要按装： apt-get install screen 用法： 先screen, 然后回车。执行自己的命令，我的是 play *.mp3 就可以关掉会话。 使用screen还要以重新打开这个会话：screen -r 很强大，详情可以 man .","categories":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"},{"name":"树莓派","slug":"linux/树莓派","permalink":"https://wanqiang.wang/categories/linux/%E6%A0%91%E8%8E%93%E6%B4%BE/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/tags/linux/"},{"name":"ssh","slug":"ssh","permalink":"https://wanqiang.wang/tags/ssh/"}]},{"title":"ios 开发之：UIButton 不好点","slug":"ios 开发之：UIButton 不好点","date":"2015-07-12T03:13:49.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/4014.html","permalink":"https://wanqiang.wang/post/4014.html","excerpt":"","text":"不好点啊，点不中。能看能摸没反应。 调试办法：把UIButton加背景，父对象加背景色，看是不是超出范围。 别的控件不响应点击也可能是这个问题。","categories":[{"name":"IOS 开发","slug":"IOS-开发","permalink":"https://wanqiang.wang/categories/IOS-%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"C++ 多重继承与转型的坑","slug":"cpp多重继承与转型的坑","date":"2015-07-09T22:55:54.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/43cb.html","permalink":"https://wanqiang.wang/post/43cb.html","excerpt":"","text":"多重继承的指针转换问题在 C++ 等支持多重继承的语言中，多重继承的指针转换问题确实是一个容易踩坑的点，尤其对初学者而言。我们来详细分析这个问题： 问题根源：多重继承的对象内存布局特殊性当一个类同时继承两个基类时，编译器会在内存中为这个对象分配一块连续的存储空间，其中包含： 第一个基类的成员变量 第二个基类的成员变量 派生类自身的成员变量 这意味着两个基类在对象内存中的起始地址是不同的。例如： 1234567891011派生类对象内存布局:[ 基类A成员 ][ 基类B成员 ][ 派生类成员 ] ↑ ↑ | | 基类A指针 基类B指针 (指向对象起始)(指向偏移位置) 错误原因分析当你手动进行指针类型转换时（如(B*)obj），可能会出现两种情况： 隐式转换 &#x2F; 正确的显式转换：编译器会自动计算并调整指针偏移量，确保转换后的指针指向正确的基类部分 错误的强制转换：如果使用了不恰当的转换方式（如 C 风格的强制转换在某些情况下），可能导致指针地址没有被正确调整，仍然指向原地址 此时用错误的指针调用成员函数或访问成员变量时： 会访问到错误的内存位置 可能调用到错误的虚函数（因为虚函数表指针也可能被错误引用） 出现难以理解的运行时错误 为什么去掉转型就正常了？当不进行显式转换时，编译器会根据上下文自动选择正确的基类接口： 调用基类 A 的成员时，自动使用基类 A 的指针偏移 调用基类 B 的成员时，自动使用基类 B 的指针偏移 这种情况下，编译器会负责所有的指针调整工作，确保访问正确。 正确的做法 尽量避免使用多重继承，优先考虑组合而非继承 必须使用时，避免手动进行指针类型转换 如果确实需要转换，应使用： C++ 的dynamic_cast（适用于多态类型，带运行时检查） 或static_cast（适用于非多态类型，编译期检查） 示例： 123456789101112131415class A &#123; ... &#125;;class B &#123; ... &#125;;class C : public A, public B &#123; ... &#125;;C* c = new C();A* a = c; // 正确，自动转换，地址正确B* b = c; // 正确，自动转换，地址已调整// 正确的显式转换B* b2 = static_cast&lt;B*&gt;(c); // 编译器会自动计算偏移 这个问题的核心在于：多重继承中不同基类的指针在内存中指向不同位置，编译器会自动处理正确的转换，但手动强制转换可能破坏这种机制，导致难以调试的错误。","categories":[{"name":"C++","slug":"C","permalink":"https://wanqiang.wang/categories/C/"}],"tags":[{"name":"c++","slug":"c","permalink":"https://wanqiang.wang/tags/c/"}]},{"title":"IOS 8 的通知调试","slug":"ios-8-的通知调试","date":"2015-06-25T00:11:33.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/1c55.html","permalink":"https://wanqiang.wang/post/1c55.html","excerpt":"","text":"自己的一个App以前开发的，使用IOS的本地通知，一直没有人反馈过这点有什么问题。但最近几天，有人找我说，本地通知在iphone 6\\6 plus 上不能用。 自己用iphone 6试了试，发现确实这样，但在4s上却没有问题，操作系统都是 IOS 8.3 。上网查了一下，发现ios 8 通知机制改了，使用之前必须要先注册设置。看来原因是这个了。看来同样是 ios 8, 4s的和6的还是不一样的。 那就开始吧，doing , done，按网上的教程在App代理中添加注册，一切预料之中，几分钟之后，本地通知在iphone 6 上终于可以跑起来了。好了，测一下吧，app 打开，没有问题，app 后台，没有问题，锁屏，哦，怎么回事，能收到通知，但没有声音，哪里出了问题？ 由于对这个新的通知不熟悉，只能开始疯狂的查文档，google，baidu，bing,bang，一头雾水，4s没事，iphone6 锁屏就是没声，时间一分一秒过去，看不出一丝端疑。 当时间到了11：30的时候，我的4s界面上的一丝变化影起了我的注意，右上出现了一个月亮图标。晕，是不是打开了 防打扰模式 啊。敢快去 iphone 6上看，果然开着。晕到，关掉，再试，声音出来了。 一个多小时白白浪费。","categories":[{"name":"iOS","slug":"iOS","permalink":"https://wanqiang.wang/categories/iOS/"}],"tags":[]},{"title":"树莓派上安装docker","slug":"树莓派上安装docker","date":"2015-05-26T23:06:26.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/baf1.html","permalink":"https://wanqiang.wang/post/baf1.html","excerpt":"","text":"这应该是现在在树莓派上安装docker的最简单的方法了，因为是使用别人做好的镜像文件，通过SD卡烧写的方式，直接就可以用了。 参照下面的这个网址，在这个网站下载镜像，树莓派2B亲测是可用的。 http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/ 如果下载慢，可以从我的百度网盘上下载： 链接：http://pan.baidu.com/s/1dD94bU5 密码：2coe &nbsp;","categories":[{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/categories/docker/"},{"name":"树莓派","slug":"docker/树莓派","permalink":"https://wanqiang.wang/categories/docker/%E6%A0%91%E8%8E%93%E6%B4%BE/"}],"tags":[]},{"title":"IOS  解析点阵字库","slug":"IOS 解析点阵字库","date":"2015-05-24T06:54:04.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/7181.html","permalink":"https://wanqiang.wang/post/7181.html","excerpt":"","text":"IOS 解析点阵字库IOS控制点阵屏显示，加载点阵字库，目前已经实现，有感兴趣的留言，我把它整理出来。 我实现的是 1616的中文和168的英文显法。 字库制作制字方案的生成和成嵌入式系统上生成字模文件的方案是一样的。 IOS从字库中取到字模字模显示","categories":[{"name":"IOS 开发","slug":"IOS-开发","permalink":"https://wanqiang.wang/categories/IOS-%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"NSLog 开关","slug":"NSLog开启关闭","date":"2015-05-24T06:42:36.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/44f7.html","permalink":"https://wanqiang.wang/post/44f7.html","excerpt":"","text":"开发IOS应用在发布的时候需要将全部的NSLog中去掉，怎么弄呢？可以使用一个宏来控制： 在系统包含的公共头文件中加入下面的语句： 12345#ifndef __OPTIMIZE__# define NSLog(...) NSLog(__VA_ARGS__)#else# define NSLog(...) &#123;&#125;#endif 一般情况下，Release版本系统会定义 OPTIMIZE 宏，而Debug版本不会，根据这个差别使用不同的NSLog，从而达到上面的目的。","categories":[{"name":"IOS 开发","slug":"IOS-开发","permalink":"https://wanqiang.wang/categories/IOS-%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"Mac 下交换caps lock 与 Ctrl","slug":"Mac 下交换caps lock 与 Ctrl","date":"2015-05-23T07:16:01.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/9dae.html","permalink":"https://wanqiang.wang/post/9dae.html","excerpt":"","text":"习惯了HHKB之后表示经常把 caps lock 与 ctrl 键按错，就想在Mac上能不能把caps lock改成ctrl呢，研究了下，发现其实很简单：在键盘设置里面的修饰键就可以改过来，直接的选项，交换就行了。 不过嘛，看起来有点怪，因为caps lock上有个灯，大小状态还是这个灯显示的，但按下的意义又完全变了。","categories":[{"name":"Mac 使用","slug":"Mac-使用","permalink":"https://wanqiang.wang/categories/Mac-%E4%BD%BF%E7%94%A8/"}],"tags":[]},{"title":"UML学习之听课","slug":"UML学习之听课","date":"2015-05-18T22:54:41.000Z","updated":"2025-10-21T02:38:15.426Z","comments":true,"path":"post/1c1c.html","permalink":"https://wanqiang.wang/post/1c1c.html","excerpt":"","text":"听了《尚学堂》关于UML学习的两天的课，自己感觉这课还不错吧，关键是讲的人结合了软件开发中的具体的经验，UML是一门工具，只有结合具体的应用场景，才能看见其价值。 这让课程主要讲了这几个方面：类图，顺序图，状态图，用例编写，其它的也基本上只是提到了一下。虽然结合的是Java的开发讲的，结合了一些Java的具体的框架，自己在这方面有些不懂。 不同的图相当于一种分析的解度，类图是静态的建模，顺序图对动态的建模。状态图用来描述一个特定的对象的所有可能的状态，以及由各种事件发生而引起的状态之间的转化。活动图用来描述事物或对象的活动变化流程。 对于类图：关键是理解和分析各种类之间的关联关系。学习中应注重与思想，而不仅仅停留在图的表面上，图只不过是思想的一种反映罢了，对于程序设计，还要结合具体的代码，例如，每一种关系，代码上是如何表现的，相反，图能够直观的反映代码的结构，比如学习设计模式，如果把设计模式都用类图表示出来。非常的直观，也很好记忆，也能更好的理解，用到这一设计模式，首先想到的是这一设计模式的类组，然后跟据自己的特定的情况，写代码就是了。 对于顺序图：顺序图反映了一种动态的过程，比如在哪课程中举的”登陆“过程例子，用顺序图非常直观的分析了这一过程，分析了各个模块（类）之间要进行的哪些交互，通过对这一过程的分析，设计者了解了程序完成某一件事情都需要做些什么，通过对交互图的认真分析，对于设计者，也可以得出类的功能划分——这一点原来自己一直感到很困惑，看老师演示这一过程，感觉自己有一点认识吧。通过功能来设计类，通过类图来理解系统，从静态和动态两个不同的方面认识系统，不同的角度，但却是一个整体。对于交互图的另一种：协作图，课程中只是提到了一下，演示了一下顺序图和协作图通过Rose的转换，说是一般用在公司的白板描述中，为了节约白板空间，自己不知这个描术是不是准确。 对于状态图：状态图应该是很重要的，这是一种程序员和客户都能看懂的图，在程序的设计阶段分析系统的各种可能的状态非常重要，否则的话，可能在开发的后期会导制系统结构的大的修改。课程中用一个开发校园一卡通作为例子，分析卡在不同时刻的状态，和不同的时刻的状态转化关系，非常直观。同时也用DVD机在工作过程中的状态用了演示。状态图对于系统的分析应该很有帮助吧。 这门课程最后还重点讲了如何作需求分析，如何写用例文档。提了一下GRASP(基于职责设计对象)模式。 收藏于 2010-01-12 来自于百度空间","categories":[{"name":"百度空间的旧文章","slug":"百度空间的旧文章","permalink":"https://wanqiang.wang/categories/%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%9A%84%E6%97%A7%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"uml","slug":"uml","permalink":"https://wanqiang.wang/tags/uml/"}]},{"title":"python进制转换","slug":"Python进程转换2","date":"2015-05-18T22:31:57.000Z","updated":"2025-10-21T02:38:15.425Z","comments":true,"path":"post/915b.html","permalink":"https://wanqiang.wang/post/915b.html","excerpt":"","text":"空间 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#!/usr/bin/env python# -*- coding: utf-8 -*-# 2/10/16 base trans. wrote by srcdog on 20th, April, 2009# ld elements in base 2, 10, 16.import os,sys# global definition# base = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F]base = [str(x) for x in range(10)] + [ chr(x) for x in range(ord(&#x27;A&#x27;),ord(&#x27;A&#x27;)+6)]# bin2dec# 二进制 to 十进制: int(str,n=10)def bin2dec(string_num):return str(int(string_num, 2))# hex2dec# 十六进制 to 十进制def hex2dec(string_num):return str(int(string_num.upper(), 16))# dec2bin# 十进制 to 二进制: bin()def dec2bin(string_num):num = int(string_num)mid = []while True:if num == 0: breaknum,rem = divmod(num, 2)mid.append(base[rem])return &#x27;&#x27;.join([str(x) for x in mid[::-1]])# dec2hex# 十进制 to 八进制: oct()# 十进制 to 十六进制: hex()def dec2hex(string_num):num = int(string_num)mid = []while True:if num == 0: breaknum,rem = divmod(num, 16)mid.append(base[rem])return &#x27;&#x27;.join([str(x) for x in mid[::-1]])# hex2tobin# 十六进制 to 二进制: bin(int(str,16))def hex2bin(string_num):return dec2bin(hex2dec(string_num.upper()))# bin2hex# 二进制 to 十六进制: hex(int(str,2))def bin2hex(string_num):return dec2hex(bin2dec(string_num))if __name__ == &#x27;__main__&#x27;:print bin2hex(&#x27;111110&#x27;)print hex2bin(&#x27;f1&#x27;)print dec2hex(&#x27;255&#x27;) 收藏于 2011-03-09来自于百度空间","categories":[{"name":"未分类","slug":"未分类","permalink":"https://wanqiang.wang/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"Excel 取消隐藏的列","slug":"Excel取消隐藏的列","date":"2015-05-18T22:17:53.000Z","updated":"2025-10-21T02:38:15.423Z","comments":true,"path":"post/4702.html","permalink":"https://wanqiang.wang/post/4702.html","excerpt":"","text":"在隐藏的列的表头上，光标放到隐藏的列的那个位置向两边拉，就把隐藏的列拉出来了。 Excel 2010 测试通过。","categories":[{"name":"百度空间的旧文章","slug":"百度空间的旧文章","permalink":"https://wanqiang.wang/categories/%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%9A%84%E6%97%A7%E6%96%87%E7%AB%A0/"}],"tags":[]},{"title":"xeletax 中文不换行的解决方案","slug":"xeletax 中文不换行的解决方案","date":"2015-05-18T22:08:02.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/227b.html","permalink":"https://wanqiang.wang/post/227b.html","excerpt":"","text":"下面的方案是可行的： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166\\XeTeXlinebreaklocale &quot;zh&quot;\\XeTeXlinebreakskip = 0pt plus 1pt`&lt;/pre&gt;整个文件：&lt;!--more--&gt;&lt;pre&gt;`\\documentclass[$if(fontsize)$$fontsize$,$endif$$if(lang)$$lang$,$endif$$if(papersize)$$papersize$,$endif$]&#123;$documentclass$&#125;\\usepackage[T1]&#123;fontenc&#125;\\usepackage&#123;lmodern&#125;\\usepackage&#123;amssymb,amsmath&#125;\\usepackage&#123;ifxetex,ifluatex&#125;\\usepackage&#123;fixltx2e&#125; % provides \\textsubscript% use microtype if available\\IfFileExists&#123;microtype.sty&#125;&#123;\\usepackage&#123;microtype&#125;&#125;&#123;&#125;% use upquote if available, for straight quotes in verbatim environments\\IfFileExists&#123;upquote.sty&#125;&#123;\\usepackage&#123;upquote&#125;&#125;&#123;&#125;\\ifnum 0\\ifxetex 1\\fi\\ifluatex 1\\fi=0 % if pdftex \\usepackage[utf8]&#123;inputenc&#125;$if(euro)$ \\usepackage&#123;eurosym&#125;$endif$\\else % if luatex or xelatex \\usepackage&#123;fontspec&#125; \\ifxetex \\usepackage&#123;xltxtra,xunicode&#125; \\fi \\defaultfontfeatures&#123;Mapping=tex-text,Scale=MatchLowercase&#125; \\newcommand&#123;\\euro&#125;&#123;€&#125;$if(mainfont)$ \\setmainfont&#123;$mainfont$&#125;$endif$$if(sansfont)$ \\setsansfont&#123;$sansfont$&#125;$endif$$if(monofont)$ \\setmonofont&#123;$monofont$&#125;$endif$$if(mathfont)$ \\setmathfont&#123;$mathfont$&#125;$endif$\\fi$if(geometry)$\\usepackage[$for(geometry)$$geometry$$sep$,$endfor$]&#123;geometry&#125;$endif$$if(natbib)$\\usepackage&#123;natbib&#125;\\bibliographystyle&#123;plainnat&#125;$endif$$if(biblatex)$\\usepackage&#123;biblatex&#125;$if(biblio-files)$\\bibliography&#123;$biblio-files$&#125;$endif$$endif$$if(listings)$\\usepackage&#123;listings&#125;$endif$$if(lhs)$\\lstnewenvironment&#123;code&#125;&#123;\\lstset&#123;language=Haskell,basicstyle=\\small\\ttfamily&#125;&#125;&#123;&#125;$endif$$if(highlighting-macros)$$highlighting-macros$$endif$$if(verbatim-in-note)$\\usepackage&#123;fancyvrb&#125;$endif$$if(tables)$\\usepackage&#123;longtable&#125;$endif$$if(graphics)$\\usepackage&#123;graphicx&#125;% We will generate all images so they have a width \\maxwidth. This means% that they will get their normal width if they fit onto the page, but% are scaled down if they would overflow the margins.\\makeatletter\\def\\maxwidth&#123;\\ifdim\\Gin@nat@width&amp;gt;\\linewidth\\linewidth\\else\\Gin@nat@width\\fi&#125;\\makeatother\\let\\Oldincludegraphics\\includegraphics\\renewcommand&#123;\\includegraphics&#125;[1]&#123;\\Oldincludegraphics[width=\\maxwidth]&#123;#1&#125;&#125;$endif$\\ifxetex \\usepackage[setpagesize=false, % page size defined by xetex unicode=false, % unicode breaks when used with xetex xetex]&#123;hyperref&#125;\\else \\usepackage[unicode=true]&#123;hyperref&#125;\\fi\\hypersetup&#123;breaklinks=true, bookmarks=true, pdfauthor=&#123;$author-meta$&#125;, pdftitle=&#123;$title-meta$&#125;, colorlinks=true, urlcolor=$if(urlcolor)$$urlcolor$$else$blue$endif$, linkcolor=$if(linkcolor)$$linkcolor$$else$magenta$endif$, pdfborder=&#123;0 0 0&#125;&#125;\\urlstyle&#123;same&#125; % don&#x27;t use monospace font for urls$if(links-as-notes)$% Make links footnotes instead of hotlinks:\\renewcommand&#123;\\href&#125;[2]&#123;#2\\footnote&#123;\\url&#123;#1&#125;&#125;&#125;$endif$$if(strikeout)$\\usepackage[normalem]&#123;ulem&#125;% avoid problems with \\sout in headers with hyperref:\\pdfstringdefDisableCommands&#123;\\renewcommand&#123;\\sout&#125;&#123;&#125;&#125;$endif$\\setlength&#123;\\parindent&#125;&#123;0pt&#125;\\setlength&#123;\\parskip&#125;&#123;6pt plus 2pt minus 1pt&#125;\\setlength&#123;\\emergencystretch&#125;&#123;3em&#125; % prevent overfull lines$if(numbersections)$$else$\\setcounter&#123;secnumdepth&#125;&#123;0&#125;\\XeTeXlinebreaklocale &quot;zh&quot;\\XeTeXlinebreakskip = 0pt plus 1pt$endif$$if(verbatim-in-note)$\\VerbatimFootnotes % allows verbatim text in footnotes$endif$$if(lang)$\\ifxetex \\usepackage&#123;polyglossia&#125; \\setmainlanguage&#123;$mainlang$&#125;\\else \\usepackage[$lang$]&#123;babel&#125;\\fi$endif$$for(header-includes)$$header-includes$$endfor$$if(title)$\\title&#123;$title$&#125;$endif$\\author&#123;$for(author)$$author$$sep$ \\and $endfor$&#125;\\date&#123;$date$&#125;\\begin&#123;document&#125;$if(title)$\\maketitle$endif$$for(include-before)$$include-before$$endfor$$if(toc)$&#123;\\hypersetup&#123;linkcolor=black&#125;\\setcounter&#123;tocdepth&#125;&#123;$toc-depth$&#125;\\tableofcontents&#125;$endif$$body$$if(natbib)$$if(biblio-files)$$if(biblio-title)$$if(book-class)$\\renewcommand\\bibname&#123;$biblio-title$&#125;$else$\\renewcommand\\refname&#123;$biblio-title$&#125;$endif$$endif$\\bibliography&#123;$biblio-files$&#125;$endif$$endif$$if(biblatex)$\\printbibliography$if(biblio-title)$[title=$biblio-title$]$endif$$endif$$for(include-after)$$include-after$$endfor$\\end&#123;document&#125; ~~~~~~~~~~~~~~~","categories":[{"name":"百度空间的旧文章","slug":"百度空间的旧文章","permalink":"https://wanqiang.wang/categories/%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%9A%84%E6%97%A7%E6%96%87%E7%AB%A0/"}],"tags":[]},{"title":"xelatex 纸张大小设置","slug":"xelatex 纸张大小设置","date":"2015-05-18T22:06:28.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/5026.html","permalink":"https://wanqiang.wang/post/5026.html","excerpt":"","text":"12345678910111213141516171819202122\\documentclass[]&#123;article&#125;\\usepackage[T1]&#123;fontenc&#125;\\usepackage&#123;lmodern&#125;\\usepackage&#123;amssymb,amsmath&#125;\\usepackage&#123;ifxetex,ifluatex&#125;**\\usepackage[body=&#123;18cm,24cm&#125;]&#123;geometry&#125;****\\geometry&#123;papersize=&#123;21cm,29.7cm&#125;&#125;**\\usepackage&#123;fixltx2e&#125; % provides \\textsubscript% use microtype if available\\IfFileExists&#123;microtype.sty&#125;&#123;\\usepackage&#123;microtype&#125;&#125;&#123;&#125;% use upquote if available, for straight quotes in verbatim environments 注意加粗的两行。 &nbsp;","categories":[{"name":"百度空间的旧文章","slug":"百度空间的旧文章","permalink":"https://wanqiang.wang/categories/%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%9A%84%E6%97%A7%E6%96%87%E7%AB%A0/"}],"tags":[]},{"title":"读书笔记：IOS视图控制器与控件","slug":"IOS视图控制器与控件","date":"2015-05-18T21:55:16.000Z","updated":"2025-10-21T02:38:15.424Z","comments":true,"path":"post/aea9.html","permalink":"https://wanqiang.wang/post/aea9.html","excerpt":"","text":"IOS 视图控制器视图控制器之间的切换在响应的位置，创建需要的视图控制器，然后preset过去。 视图控制器之间传递数据 通知中心 最简单的方式，缺点就是两个类之前没有关系。 代理模式 采用协议的方式，需要向外传数据的类定义代理，接受数据的类实现协议。协议赋值采用 assign。 # IOS 控件 * UILabel * UIControl 处理事件 * UIButton 处理状态 工厂方法：buttonWithType 贴图的方法，要使用custorm Type cancel 事件，来电话和锁屏触发 * 风火轮（UIActivityIndicatorView） 显示与停止，显示到状态栏。","categories":[],"tags":[{"name":"IOS","slug":"IOS","permalink":"https://wanqiang.wang/tags/IOS/"}]},{"title":"读书笔记：IOS视图控制器与控件","slug":"读书笔记：IOS视图控制器与控件","date":"2015-05-18T21:55:16.000Z","updated":"2025-10-21T02:38:15.428Z","comments":true,"path":"post/aea9.html","permalink":"https://wanqiang.wang/post/aea9.html","excerpt":"","text":"IOS 视图控制器视图控制器之间的切换在响应的位置，创建需要的视图控制器，然后preset过去。 视图控制器之间传递数据1. 通知中心 最简单的方式，缺点就是两个类之前没有关系。 1. 代理模式 采用协议的方式，需要向外传数据的类定义代理，接受数据的类实现协议。协议赋值采用 assign。 IOS 控件 UILabel UIControl 处理事件 UIButton 处理状态工厂方法：buttonWithType贴图的方法，要使用custorm Type cancel 事件，来电话和锁屏触发 风火轮（UIActivityIndicatorView） 显示与停止，显示到状态栏。","categories":[{"name":"iOS","slug":"iOS","permalink":"https://wanqiang.wang/categories/iOS/"}],"tags":[]},{"title":"头文件及keil C的一点经验(转)","slug":"头文件及keilC的一点经验","date":"2009-09-26T22:58:18.000Z","updated":"2025-10-21T02:38:15.427Z","comments":true,"path":"post/e241.html","permalink":"https://wanqiang.wang/post/e241.html","excerpt":"","text":"头文件及keil C的一点经验许多初学者使用网上下载的程序时都会遇到这样一个问题，就是头文件找不到。我想就这个问题说明一下。 首先，我们用到的KEIL有几种版本的，头文件也不同。有reg51.h和at89x51.h两种比较常见。at89x51和reg51这两个文件有点不同，reg51没有对IO口的位地址进行定义。所以我们在使用reg51的时候，可能会有一些相关语句通不过，比方说P0_1&#x3D;1;这样的位操作。 文件都放在Keil的KEILC\\C51\\INC目录下，大家可以看看自己的KEIL版本使用了哪个头文件，也有些KEIL封装了reg51和at89x51两个头文件，都可以用。 头文件定义在程序的第一行，方法是#include ，如果提示这个文件找不到可以改为#include 试试。 下面是一些使用心得，网上的.使用Keil C调试某系统时积累的一些经验 123456789101、在Windows2000下面，我们可以把字体设置为Courier，这样就可以显示正常。2、当使用有片外内存的MCU（如W77E58，它有1K片外内存）的时候，肯定要设置标志位，并且编译方式要选择大模式，否则会出错。3、当使用Keil C跟踪程序运行状态的时候，要把引起Warning的语句屏蔽，否则有可能跟踪语句的时候会出错。4、在调用数组的时候，Keil C是首先把数组Load进内存。如果要在C中使用长数组的时候，我们可以使用code关键字，这样就实现了汇编的DB的功能，Keil C是不会把标志code的数组Load入内存的，它会直接读取Rom。5、拉高管脚的执行速度远远比检查管脚电平的要快。当编程涉及到有关通信，时序是很重要的。6、在等待管脚电平变化的时候，我们需要设置好超时处理，否则程序就会因为一个没有预计的错误而死锁。7、能用C语言实现的地方，尽量不要用汇编，尤其在算法的实现，用汇编是晦涩难懂。8、程序的几个参数数组所占篇幅很大，其中液晶背景数组最长，有四千个Byte，因而把那些初始化数组都放在另外一个C文件，在主文件使用使用关键字extern定义，这样就不会对主文件的编写造成干扰。9、所有函数之间的相关性越低越有利于以后功能的扩展。10、6.20版在编译带code关键字的数组时，编译通过但是单片机运行结果是错误的，改用6.14版后正常。","categories":[{"name":"百度空间的旧文章","slug":"百度空间的旧文章","permalink":"https://wanqiang.wang/categories/%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%9A%84%E6%97%A7%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"keil","slug":"keil","permalink":"https://wanqiang.wang/tags/keil/"}]}],"categories":[{"name":"旅行","slug":"旅行","permalink":"https://wanqiang.wang/categories/%E6%97%85%E8%A1%8C/"},{"name":"国内游","slug":"旅行/国内游","permalink":"https://wanqiang.wang/categories/%E6%97%85%E8%A1%8C/%E5%9B%BD%E5%86%85%E6%B8%B8/"},{"name":"自驾游","slug":"旅行/国内游/自驾游","permalink":"https://wanqiang.wang/categories/%E6%97%85%E8%A1%8C/%E5%9B%BD%E5%86%85%E6%B8%B8/%E8%87%AA%E9%A9%BE%E6%B8%B8/"},{"name":"人物","slug":"人物","permalink":"https://wanqiang.wang/categories/%E4%BA%BA%E7%89%A9/"},{"name":"SQLite","slug":"SQLite","permalink":"https://wanqiang.wang/categories/SQLite/"},{"name":"外设","slug":"外设","permalink":"https://wanqiang.wang/categories/%E5%A4%96%E8%AE%BE/"},{"name":"Qt","slug":"Qt","permalink":"https://wanqiang.wang/categories/Qt/"},{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/categories/linux/"},{"name":"Go","slug":"Go","permalink":"https://wanqiang.wang/categories/Go/"},{"name":"开发","slug":"Go/开发","permalink":"https://wanqiang.wang/categories/Go/%E5%BC%80%E5%8F%91/"},{"name":"代码","slug":"代码","permalink":"https://wanqiang.wang/categories/%E4%BB%A3%E7%A0%81/"},{"name":"GUI","slug":"Qt/GUI","permalink":"https://wanqiang.wang/categories/Qt/GUI/"},{"name":"win10","slug":"win10","permalink":"https://wanqiang.wang/categories/win10/"},{"name":"输入法","slug":"win10/输入法","permalink":"https://wanqiang.wang/categories/win10/%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"嵌入式","slug":"外设/嵌入式","permalink":"https://wanqiang.wang/categories/%E5%A4%96%E8%AE%BE/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"数据分析","slug":"数据分析","permalink":"https://wanqiang.wang/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"qt","slug":"qt","permalink":"https://wanqiang.wang/categories/qt/"},{"name":"c++","slug":"qt/c","permalink":"https://wanqiang.wang/categories/qt/c/"},{"name":"compile","slug":"linux/compile","permalink":"https://wanqiang.wang/categories/linux/compile/"},{"name":"dd-wrt","slug":"dd-wrt","permalink":"https://wanqiang.wang/categories/dd-wrt/"},{"name":"路由器","slug":"dd-wrt/路由器","permalink":"https://wanqiang.wang/categories/dd-wrt/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"iText","slug":"iText","permalink":"https://wanqiang.wang/categories/iText/"},{"name":"tools","slug":"tools","permalink":"https://wanqiang.wang/categories/tools/"},{"name":"未分类","slug":"未分类","permalink":"https://wanqiang.wang/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"},{"name":"IOS","slug":"IOS","permalink":"https://wanqiang.wang/categories/IOS/"},{"name":"tmux","slug":"tmux","permalink":"https://wanqiang.wang/categories/tmux/"},{"name":"linux","slug":"tmux/linux","permalink":"https://wanqiang.wang/categories/tmux/linux/"},{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/categories/docker/"},{"name":"c++","slug":"c","permalink":"https://wanqiang.wang/categories/c/"},{"name":"日志系统","slug":"日志系统","permalink":"https://wanqiang.wang/categories/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"},{"name":"数据库","slug":"数据库","permalink":"https://wanqiang.wang/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"PHP","slug":"PHP","permalink":"https://wanqiang.wang/categories/PHP/"},{"name":"好文收藏","slug":"PHP/好文收藏","permalink":"https://wanqiang.wang/categories/PHP/%E5%A5%BD%E6%96%87%E6%94%B6%E8%97%8F/"},{"name":"好文收藏","slug":"好文收藏","permalink":"https://wanqiang.wang/categories/%E5%A5%BD%E6%96%87%E6%94%B6%E8%97%8F/"},{"name":"iOS","slug":"iOS","permalink":"https://wanqiang.wang/categories/iOS/"},{"name":"未分类","slug":"docker/未分类","permalink":"https://wanqiang.wang/categories/docker/%E6%9C%AA%E5%88%86%E7%B1%BB/"},{"name":"IT","slug":"IT","permalink":"https://wanqiang.wang/categories/IT/"},{"name":"win 10","slug":"IT/win-10","permalink":"https://wanqiang.wang/categories/IT/win-10/"},{"name":"tar","slug":"linux/tar","permalink":"https://wanqiang.wang/categories/linux/tar/"},{"name":"MicroGen8","slug":"linux/MicroGen8","permalink":"https://wanqiang.wang/categories/linux/MicroGen8/"},{"name":"Mac 使用","slug":"Mac-使用","permalink":"https://wanqiang.wang/categories/Mac-%E4%BD%BF%E7%94%A8/"},{"name":"IOS 开发","slug":"IOS-开发","permalink":"https://wanqiang.wang/categories/IOS-%E5%BC%80%E5%8F%91/"},{"name":"gem","slug":"gem","permalink":"https://wanqiang.wang/categories/gem/"},{"name":"git","slug":"git","permalink":"https://wanqiang.wang/categories/git/"},{"name":"linux","slug":"docker/linux","permalink":"https://wanqiang.wang/categories/docker/linux/"},{"name":"树莓派","slug":"linux/树莓派","permalink":"https://wanqiang.wang/categories/linux/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"C++","slug":"C","permalink":"https://wanqiang.wang/categories/C/"},{"name":"树莓派","slug":"docker/树莓派","permalink":"https://wanqiang.wang/categories/docker/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"百度空间的旧文章","slug":"百度空间的旧文章","permalink":"https://wanqiang.wang/categories/%E7%99%BE%E5%BA%A6%E7%A9%BA%E9%97%B4%E7%9A%84%E6%97%A7%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"自驾游","slug":"自驾游","permalink":"https://wanqiang.wang/tags/%E8%87%AA%E9%A9%BE%E6%B8%B8/"},{"name":"人物传记","slug":"人物传记","permalink":"https://wanqiang.wang/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"},{"name":"计算机科学","slug":"计算机科学","permalink":"https://wanqiang.wang/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"},{"name":"TEX","slug":"TEX","permalink":"https://wanqiang.wang/tags/TEX/"},{"name":"广州","slug":"广州","permalink":"https://wanqiang.wang/tags/%E5%B9%BF%E5%B7%9E/"},{"name":"交通攻略","slug":"交通攻略","permalink":"https://wanqiang.wang/tags/%E4%BA%A4%E9%80%9A%E6%94%BB%E7%95%A5/"},{"name":"SQLite","slug":"SQLite","permalink":"https://wanqiang.wang/tags/SQLite/"},{"name":"printer","slug":"printer","permalink":"https://wanqiang.wang/tags/printer/"},{"name":"Qt","slug":"Qt","permalink":"https://wanqiang.wang/tags/Qt/"},{"name":"linux","slug":"linux","permalink":"https://wanqiang.wang/tags/linux/"},{"name":"服务器","slug":"服务器","permalink":"https://wanqiang.wang/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"Go","slug":"Go","permalink":"https://wanqiang.wang/tags/Go/"},{"name":"程序","slug":"程序","permalink":"https://wanqiang.wang/tags/%E7%A8%8B%E5%BA%8F/"},{"name":"GUI","slug":"GUI","permalink":"https://wanqiang.wang/tags/GUI/"},{"name":"win10","slug":"win10","permalink":"https://wanqiang.wang/tags/win10/"},{"name":"输入法","slug":"输入法","permalink":"https://wanqiang.wang/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"Links","slug":"Links","permalink":"https://wanqiang.wang/tags/Links/"},{"name":"外设","slug":"外设","permalink":"https://wanqiang.wang/tags/%E5%A4%96%E8%AE%BE/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://wanqiang.wang/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"数据分析","slug":"数据分析","permalink":"https://wanqiang.wang/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"qt","slug":"qt","permalink":"https://wanqiang.wang/tags/qt/"},{"name":"compile","slug":"compile","permalink":"https://wanqiang.wang/tags/compile/"},{"name":"dd-wrt","slug":"dd-wrt","permalink":"https://wanqiang.wang/tags/dd-wrt/"},{"name":"路由器","slug":"路由器","permalink":"https://wanqiang.wang/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"iText","slug":"iText","permalink":"https://wanqiang.wang/tags/iText/"},{"name":"排版","slug":"排版","permalink":"https://wanqiang.wang/tags/%E6%8E%92%E7%89%88/"},{"name":"blog","slug":"blog","permalink":"https://wanqiang.wang/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://wanqiang.wang/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://wanqiang.wang/tags/next/"},{"name":"qnap","slug":"qnap","permalink":"https://wanqiang.wang/tags/qnap/"},{"name":"下载","slug":"下载","permalink":"https://wanqiang.wang/tags/%E4%B8%8B%E8%BD%BD/"},{"name":"docker","slug":"docker","permalink":"https://wanqiang.wang/tags/docker/"},{"name":"transmission","slug":"transmission","permalink":"https://wanqiang.wang/tags/transmission/"},{"name":"Python","slug":"Python","permalink":"https://wanqiang.wang/tags/Python/"},{"name":"环境配置","slug":"环境配置","permalink":"https://wanqiang.wang/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"QWebView","slug":"QWebView","permalink":"https://wanqiang.wang/tags/QWebView/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://wanqiang.wang/tags/JavaScript/"},{"name":"性能优化","slug":"性能优化","permalink":"https://wanqiang.wang/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"},{"name":"android","slug":"android","permalink":"https://wanqiang.wang/tags/android/"},{"name":"log","slug":"log","permalink":"https://wanqiang.wang/tags/log/"},{"name":"database","slug":"database","permalink":"https://wanqiang.wang/tags/database/"},{"name":"bitnami","slug":"bitnami","permalink":"https://wanqiang.wang/tags/bitnami/"},{"name":"redmine","slug":"redmine","permalink":"https://wanqiang.wang/tags/redmine/"},{"name":"tar","slug":"tar","permalink":"https://wanqiang.wang/tags/tar/"},{"name":"MicroGen8","slug":"MicroGen8","permalink":"https://wanqiang.wang/tags/MicroGen8/"},{"name":"git","slug":"git","permalink":"https://wanqiang.wang/tags/git/"},{"name":"github","slug":"github","permalink":"https://wanqiang.wang/tags/github/"},{"name":"代理","slug":"代理","permalink":"https://wanqiang.wang/tags/%E4%BB%A3%E7%90%86/"},{"name":"ios","slug":"ios","permalink":"https://wanqiang.wang/tags/ios/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://wanqiang.wang/tags/ubuntu/"},{"name":"ssh","slug":"ssh","permalink":"https://wanqiang.wang/tags/ssh/"},{"name":"c++","slug":"c","permalink":"https://wanqiang.wang/tags/c/"},{"name":"uml","slug":"uml","permalink":"https://wanqiang.wang/tags/uml/"},{"name":"IOS","slug":"IOS","permalink":"https://wanqiang.wang/tags/IOS/"},{"name":"keil","slug":"keil","permalink":"https://wanqiang.wang/tags/keil/"}]}